# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import ast as module_0
import astvisitors as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "Wt:6i<\rWPZACz#S<|"
    none_type_0 = None
    var_0 = module_0.get_source_segment(none_type_0, none_type_0, padded=str_0)
    none_type_1 = None
    module_1.ConstructorVisitor(var_0, none_type_1, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "py2puml.domain"
    str_1 = "scs8a'/CF"
    str_2 = '$!2f\\v_peNd"]n\x0b:c'
    bytes_0 = b"4`\xcdW\x93\xb3\x91\xf3,\\F\x1d\x00\xc1"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: bytes_0, str_1: str_1}
    module_1.Variable(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    str_0 = "10`w@%Z\x0b4_4)"
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0}
    module_1.SignatureVariablesCollector(bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "a6"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id == "a6"
    assert assigned_variables_collector_0.annotation == "a6"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    list_0 = [
        assigned_variables_collector_0,
        assigned_variables_collector_0,
        assigned_variables_collector_0,
    ]
    attribute_0 = module_0.Attribute(*list_0)
    var_0 = assigned_variables_collector_0.visit_Attribute(attribute_0)
    str_1 = "]o~~y|$"
    assigned_variables_collector_1 = module_1.AssignedVariablesCollector(str_1, var_0)
    var_1 = assigned_variables_collector_1.visit_Subscript(
        assigned_variables_collector_1
    )
    module_1.Variable()


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "a6"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id == "a6"
    assert assigned_variables_collector_0.annotation == "a6"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    list_0 = [str_0, assigned_variables_collector_0]
    name_0 = module_0.Name(*list_0)
    var_0 = assigned_variables_collector_0.visit_Name(name_0)
    module_1.ConstructorVisitor(str_0, str_0, str_0, var_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "a6"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id == "a6"
    assert assigned_variables_collector_0.annotation == "a6"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    list_0 = [str_0, assigned_variables_collector_0]
    name_0 = module_0.Name(*list_0)
    var_0 = assigned_variables_collector_0.visit_Name(name_0)
    module_1.ConstructorVisitor(str_0, str_0, str_0, var_0, **var_0)


def test_case_6():
    str_0 = "54b\rT(=?b5d%{f"
    none_type_0 = None
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(
        str_0, none_type_0
    )
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id == "54b\rT(=?b5d%{f"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "a6"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id == "a6"
    assert assigned_variables_collector_0.annotation == "a6"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    list_0 = [
        assigned_variables_collector_0,
        assigned_variables_collector_0,
        assigned_variables_collector_0,
    ]
    attribute_0 = module_0.Attribute(*list_0)
    var_0 = assigned_variables_collector_0.visit_Attribute(attribute_0)
    var_1 = assigned_variables_collector_0.visit_Subscript(
        assigned_variables_collector_0
    )
    var_2 = var_0.__repr__()
    var_2.visit_Name(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    str_0 = ">kE\\\n"
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.ConstructorVisitor(none_type_0, str_0, str_0, str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    str_0 = ".__init~__"
    signature_variables_collector_0 = module_1.SignatureVariablesCollector(str_0)
    assert (
        f"{type(signature_variables_collector_0).__module__}.{type(signature_variables_collector_0).__qualname__}"
        == "astvisitors.SignatureVariablesCollector"
    )
    assert signature_variables_collector_0.constructor_source == ".__init~__"
    assert signature_variables_collector_0.class_self_id is None
    assert signature_variables_collector_0.variables == []
    signature_variables_collector_0.visit_Constant(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    module_1.Variable()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\n\xae\xc2\xb2\x15\xaf\t\xcb;=\xdd$"
    str_0 = "Tfj:h.u$B\tDLWJ"
    var_0 = module_0.get_source_segment(str_0, str_0)
    str_1 = "\n    Information of a value type:\n    - the module-prefixed type name\n    - the short type name\n    "
    str_2 = "D\\l5"
    dict_0 = {str_1: str_0, str_2: bytes_0}
    module_1.ConstructorVisitor(var_0, bytes_0, var_0, bytes_0, **dict_0)

# More test cases

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "test_string"
    none_type_0 = None
    var_0 = module_0.get_source_segment(none_type_0, none_type_0, padded=str_0)
    none_type_1 = None
    module_1.VariableVisitor(var_0, none_type_1, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "test_string_2"
    str_1 = "test_string_3"
    str_2 = "test_string_4"
    bytes_0 = b"test_bytes"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: bytes_0, str_1: str_1}
    module_1.Variable(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    str_0 = "test_string"
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0}
    module_1.SignatureVariablesCollector(bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "test_string"
    none_type_0 = None
    var_0 = module_0.get_source_segment(none_type_0, none_type_0, padded=str_0)
    none_type_1 = None
    module_1.ConstructorVisitor(var_0, none_type_1, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "test_string"
    str_1 = "another_test_string"
    str_2 = "yet_another_test_string"
    bytes_0 = b"some_bytes"
    dict_0 = {str_0: str_1, str_1: str_2, str_2: bytes_0}
    module_1.Variable(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    str_0 = "test_string"
    dict_0 = {str_0: bool_0}
    module_1.SignatureVariablesCollector(bool_0, **dict_0)

@pytest.mark.xfail
def test_case_18():
    str_0 = "test_string"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "test_string"
    assert assigned_variables_collector_0.annotation == "test_string"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    
@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "test_string"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    var_0 = assigned_variables_collector_0.visit_Name(assigned_variables_collector_0)
    module_1.ConstructorVisitor(str_0, str_0, str_0, var_0, **var_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "test_string"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    list_0 = [assigned_variables_collector_0, assigned_variables_collector_0, assigned_variables_collector_0]
    attribute_0 = module_0.Attribute(*list_0)
    var_0 = assigned_variables_collector_0.visit_Attribute(attribute_0)
    module_1.Variable()

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "test_string"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    list_0 = [str_0, assigned_variables_collector_0]
    name_0 = module_0.Name(*list_0)
    var_0 = assigned_variables_collector_0.visit_Name(name_0)
    module_1.ConstructorVisitor(str_0, str_0, str_0, var_0, **var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "test_string"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "test_string"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "test_string"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    list_0 = [assigned_variables_collector_0, assigned_variables_collector_0, assigned_variables_collector_0]
    attribute_0 = module_0.Attribute(*list_0)
    var_0 = assigned_variables_collector_0.visit_Attribute(attribute_0)
    var_1 = assigned_variables_collector_0.visit_Subscript(assigned_variables_collector_0)
    var_2 = var_0.__repr__()
    var_2.visit_Name(var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    str_0 = "test_string"
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.ConstructorVisitor(none_type_0, str_0, str_0, str_0, **dict_0)



@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "unique_string_25"
    str_1 = "another_unique_string_25"
    bytes_0 = b"some_bytes_25"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "unique_string_26"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_26"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "unique_string_27"
    str_1 = "another_unique_string_27"
    bytes_0 = b"some_bytes_27"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = "unique_string_28"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_28"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []



@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "unique_string_29"
    str_1 = "another_unique_string_29"
    bytes_0 = b"some_bytes_29"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "unique_string_30"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_30"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "unique_string_31"
    str_1 = "another_unique_string_31"
    bytes_0 = b"some_bytes_31"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "unique_string_32"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_32"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []


@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "unique_string_33"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_33"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "unique_string_34"
    str_1 = "another_unique_string_34"
    bytes_0 = b"some_bytes_34"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = "unique_string_35"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_35"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "unique_string_36"
    str_1 = "another_unique_string_36"
    bytes_0 = b"some_bytes_36"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = "unique_string_37"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_37"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = "unique_string_38"
    str_1 = "another_unique_string_38"
    bytes_0 = b"some_bytes_38"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "unique_string_39"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_39"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = "unique_string_40"
    str_1 = "another_unique_string_40"
    bytes_0 = b"some_bytes_40"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

   
def test_case_41():
    str_0 = "unique_string_41"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_41"
    assert assigned_variables_collector_0.annotation == "unique_string_41"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "unique_string_42"
    str_1 = "another_unique_string_42"
    bytes_0 = b"some_bytes_42"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_43():
    str_0 = "unique_string_43"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_43"
    assert assigned_variables_collector_0.annotation == "unique_string_43"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = "unique_string_44"
    str_1 = "another_unique_string_44"
    bytes_0 = b"some_bytes_44"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_45():
    str_0 = "unique_string_45"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_45"
    assert assigned_variables_collector_0.annotation == "unique_string_45"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = "unique_string_46"
    str_1 = "another_unique_string_46"
    bytes_0 = b"some_bytes_46"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_47():
    str_0 = "unique_string_47"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_47"
    assert assigned_variables_collector_0.annotation == "unique_string_47"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "unique_string_48"
    str_1 = "another_unique_string_48"
    bytes_0 = b"some_bytes_48"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    str_0 = "unique_string_49"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_49"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

   
@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = "unique_string_50"
    str_1 = "another_unique_string_50"
    bytes_0 = b"some_bytes_50"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)
    
def test_case_51():
    str_0 = "unique_string_51"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_51"
    assert assigned_variables_collector_0.annotation == "unique_string_51"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

def test_case_52():
    str_0 = ""
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == ""
    assert assigned_variables_collector_0.annotation == ""
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

def test_case_53():
    str_0 = None
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id is None
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

def test_case_54():
    str_0 = "unique_string_54"
    str_1 = None
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_1)
    assert assigned_variables_collector_0.class_self_id == "unique_string_54"
    assert assigned_variables_collector_0.annotation is None
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

def test_case_55():
    str_0 = None
    str_1 = "unique_string_55"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_1)
    assert assigned_variables_collector_0.class_self_id is None
    assert assigned_variables_collector_0.annotation == "unique_string_55"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

def test_case_56():
    str_0 = "unique_string_56"
    str_1 = "unique_string_57"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_1)
    assert assigned_variables_collector_0.class_self_id == "unique_string_56"
    assert assigned_variables_collector_0.annotation == "unique_string_57"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_57():
    str_0 = "unique_string_57"
    str_1 = "another_unique_string_57"
    bytes_0 = b"some_bytes_57"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_58():
    str_0 = "unique_string_58"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_58"
    assert assigned_variables_collector_0.annotation == "unique_string_58"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_59():
    str_0 = "unique_string_59"
    str_1 = "another_unique_string_59"
    bytes_0 = b"some_bytes_59"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_60():
    str_0 = "unique_string_60"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_60"
    assert assigned_variables_collector_0.annotation == "unique_string_60"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_61():
    str_0 = "unique_string_61"
    str_1 = "another_unique_string_61"
    bytes_0 = b"some_bytes_61"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_62():
    str_0 = "unique_string_62"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_62"
    assert assigned_variables_collector_0.annotation == "unique_string_62"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_63():
    str_0 = "unique_string_63"
    str_1 = "another_unique_string_63"
    bytes_0 = b"some_bytes_63"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_64():
    str_0 = "unique_string_64"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_64"
    assert assigned_variables_collector_0.annotation == "unique_string_64"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_65():
    str_0 = "unique_string_65"
    str_1 = "another_unique_string_65"
    bytes_0 = b"some_bytes_65"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_66():
    str_0 = "unique_string_66"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_66"
    assert assigned_variables_collector_0.annotation == "unique_string_66"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_67():
    str_0 = "unique_string_67"
    str_1 = "another_unique_string_67"
    bytes_0 = b"some_bytes_67"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_68():
    str_0 = "unique_string_68"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_68"
    assert assigned_variables_collector_0.annotation == "unique_string_68"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_69():
    str_0 = "unique_string_69"
    str_1 = "another_unique_string_69"
    bytes_0 = b"some_bytes_69"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

def test_case_70():
    str_0 = "unique_string_70"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_70"
    assert assigned_variables_collector_0.annotation == "unique_string_70"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []

@pytest.mark.xfail(strict=True)
def test_case_71():
    str_0 = "unique_string_71"
    str_1 = "another_unique_string_71"
    bytes_0 = b"some_bytes_71"
    dict_0 = {str_0: str_1, str_1: bytes_0}
    module_1.Variable(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_72():
    str_0 = "unique_string_72"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_72"
    assert assigned_variables_collector_0.annotation == "unique_string_72"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_col
@pytest.mark.xfail(strict=True)
def test_case_73():
    str_0 = "unique_string_73"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_73"
    assert assigned_variables_collector_0.annotation == "unique_string_73"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_col
@pytest.mark.xfail(strict=True)
def test_case_74():
    str_0 = "unique_string_74"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_74"
    assert assigned_variables_collector_0.annotation == "unique_string_74"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_col
    
@pytest.mark.xfail(strict=True)
def test_case_76():
    str_0 = "unique_string_76"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_76"
    assert assigned_variables_collector_0.annotation == "unique_string_76"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_col


def test_case_75():
    str_0 = "unique_string_75"
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(str_0, str_0)
    assert assigned_variables_collector_0.class_self_id == "unique_string_75"
    assert assigned_variables_collector_0.annotation == "unique_string_75"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
