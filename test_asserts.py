# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import asserts as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ".LGHr>4,,6|uX"
    none_type_0 = None
    module_0.assert_py2puml_is_file_content(none_type_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_0.assert_py2puml_is_file_content(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x00\xd0\xed\x1a\xa1e\xc3\xfb$i\x01"
    var_0 = module_0.assert_multilines(bytes_0, bytes_0)
    module_0.assert_multilines(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "py2puml/py2puml.domain.puml"
    str_1 = '$cg<W5M"0\x0btc{g]<K*Y'
    module_0.assert_py2puml_is_stringio(str_1, str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "+8hvxGS \x0bU"
    str_1 = "S\r,A/bJ<4NF["
    list_0 = [str_1, str_0]
    none_type_0 = None
    module_0.assert_py2puml_is_file_content(list_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "]"
    module_0.assert_py2puml_is_stringio(str_0, str_0, str_0)


def test_case_6():
    list_0 = []
    with pytest.raises(AssertionError):
        module_0.assert_multilines(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    str_0 = "."
    module_0.assert_py2puml_is_file_content(bool_0, str_0, str_0)


def test_case_8():
    pass


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "Ub/ey%t{"
    module_0.assert_py2puml_is_file_content(list_0, str_0, bool_0)

def test_case_10():
    list_0 = [1, 2, 3]
    module_0.assert_multilines(list_0, list_0)
    
@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\xea\xf1j\xb0&\r}\xf5\xc0\\\x18"
    var_0 = module_0.assert_multilines(bytes_0, bytes_0)
    module_0.assert_multilines(bytes_0, var_0)
    
# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import asserts as module_0


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "!E)z,.N;'D(_iPd"
    none_type_0 = None
    module_0.assert_py2puml_is_file_content(none_type_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    module_0.assert_py2puml_is_file_content(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\xfe\xad\xbe\xef\x00\x01\x02\x03\x04\x05"
    var_0 = module_0.assert_multilines(bytes_0, bytes_0[::-1])
    module_0.assert_multilines(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "py2puml/py2puml.domain.puml"
    str_1 = '\x85aRJ\xe5\\!9;u'
    module_0.assert_py2puml_is_stringio(str_1, str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "{p\tL\nCn'R"
    str_1 = "|m2XmD4_h_T@2E"
    list_0 = [str_1, str_0]
    none_type_0 = None
    module_0.assert_py2puml_is_file_content(list_0, str_0[::-1], none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "!"
    module_0.assert_py2puml_is_stringio(str_0, str_0, str_0)


def test_case_18():
    list_0 = ['foo', 'bar', 'baz']
    with pytest.raises(AssertionError):
        module_0.assert_multilines(list_0, list_0[::-1])


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    str_0 = "!#(r8^lW)Gv"
    module_0.assert_py2puml_is_file_content(bool_0, str_0, str_0[::-1])


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "hello\nworld\n"
    str_1 = "hello\npython\n"
    with pytest.raises(AssertionError) as exc_info:
        module_0.assert_multilines(str_0, str_1)
    expected_msg = "actual and expected contents have changed at line 2: actual_line=world, expected_line=python"
    assert str(exc_info.value) == expected_msg

# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import asserts as module_0


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    str_0 = "test"
    module_0.assert_py2puml_is_stringio(bool_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "test"
    none_type_0 = None
    module_0.assert_py2puml_is_file_content(none_type_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "@startuml test\nAAA\n@enduml"
    str_1 = "t"
    with pytest.raises(AssertionError):
        module_0.assert_py2puml_is_file_content(str_0, str_1, str_1)


@pytest.mark.xfail(strict=True, raises=OSError)
def test_case_24():
    str_0 = "test/py2puml.domain.puml"
    with open(str_0, "w") as f:
        f.write("test")
    module_0.assert_py2puml_is_file(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "test"
    list_0 = [str_0]
    bool_0 = True
    module_0.assert_py2puml_is_file_content(bool_0, str_0, list_0)


def test_case_26():
    with pytest.raises(TypeError):
        module_0.assert_multilines(None, None)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = False
    str_0 = "test"
    list_0 = [str_0, bool_0]
    none_type_0 = None
    module_0.assert_py2puml_is_file_content(list_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = "test"
    bytes_0 = b"\xca\xb4\xb5{\x9c\x13I\xc4.\x91'"
    module_0.assert_py2puml_is_stringio(bytes_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "@startuml test\nAAA\n@enduml"
    str_1 = "@startuml test\nBBB\n@enduml"
    with pytest.raises(AssertionError):
        module_0.assert_py2puml_is_file_content(str_0, str_1, 169)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "test"
    list_0 = [str_0]
    var_0 = module_0.assert_multilines(list_0, list_0)
    module_0.assert_multilines(str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = True
    str_0 = "test"
    list_0 = [bool_0, str_0]
    module_0.assert_py2puml_is_stringio(str_0, list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = ["test"]
    str_1 = "test"
    with pytest.raises(TypeError):
        module_0.assert_py2puml_is_file(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "@startuml\nAAA\n@enduml\n"
    str_1 = "@startuml\nAAA\nBBB\n@enduml\n"
    with pytest.raises(AssertionError):
        module_0.assert_py2puml_is_file_content(str_0, str_1)



@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = ["test"]
    str_1 = "test"
    with pytest.raises(TypeError):
        module_0.assert_py2puml_is_file(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = "test"
    list_0 = [str_0]
    var_0 = module_0.assert_multilines(list_0, list_0)
    with pytest.raises(TypeError):
        module_0.assert_py2puml_is_file_content(str_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "test"
    list_0 = [str_0]
    var_0 = module_0.assert_multilines(list_0, list_0)
    module_0.assert_multilines(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = True
    str_0 = "test"
    list_0 = [bool_0, str_0]
    module_0.assert_py2puml_is_file(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    expected = ["line 1", "line 2"]
    actual = ["line 1"]
    with pytest.raises(AssertionError):
        module_0.assert_file_content(expected, actual)


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "test"
    bool_0 = True
    list_0 = [str_0, bool_0]
    module_0.assert_py2puml_is_stringio(bool_0, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = "test"
    list_0 = [str_0]
    var_0 = module_0.assert_multilines(list_0, list_0)
    with pytest.raises(TypeError):
        module_0.assert_py2puml_is_file(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = "@startuml a"
    str_1 = "@startuml b"
    with pytest.raises(AssertionError):
        module_0.assert_py2puml_is_file_content(str_0, str_1, 169)

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "tesst"
    list_0 = [str_0]
    var_0 = module_0.assert_multilines(list_0, list_0)
    module_0.assert_multilines(str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    bool_0 = False
    str_0 = "test"
    list_0 = [bool_0, str_0]
    module_0.assert_py2puml_is_stringio(str_0, list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = ["tessssssssssst"]
    str_1 = "test"
    with pytest.raises(TypeError):
        module_0.assert_py2puml_is_file(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = "@stsn"
    str_1 = "@staa\n@enduml\n"
    with pytest.raises(AssertionError):
        module_0.assert_py2puml_is_file_content(str_0, str_1)



@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = ["test"]
    str_1 = "test"
    with pytest.raises(TypeError):
        module_0.assert_py2puml_is_file(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = "tetst"
    list_0 = [str_0]
    var_0 = module_0.assert_multilines(list_0, list_0)
    with pytest.raises(TypeError):
        module_0.assert_py2puml_is_file_content(str_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "teqqqqqqst"
    list_0 = [str_0]
    var_0 = module_0.assert_multilines(list_0, list_0)
    module_0.assert_multilines(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = True
    str_0 = "test"
    list_0 = [bool_0, str_0]
    module_0.assert_py2puml_is_file(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    expected = ["lineaa 1", "line 2"]
    actual = ["line 1"]
    with pytest.raises(AssertionError):
        module_0.assert_file_content(expected, actual)


@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = "tesaddsst"
    bool_0 = True
    list_0 = [str_0, bool_0]
    module_0.assert_py2puml_is_stringio(bool_0, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = "teasdsdst"
    list_0 = [str_0]
    var_0 = module_0.assert_multilines(list_0, list_0)
    with pytest.raises(TypeError):
        module_0.assert_py2puml_is_file(var_0, str_0)
