# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import os
import builtins as module_0
import inspectclass as module_1
import py2puml.domain.umlclass as module_2
import inspect as module_3
import py2puml.domain.umlrelation as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    type_0 = module_0.bool
    int_0 = 348
    list_0 = []
    module_1.handle_inheritance_relation(type_0, int_0, int_0, list_0)


def test_case_1():
    type_0 = module_0.set
    none_type_0 = None
    str_0 = '^|u\x0c#(i"\t(w"'
    dict_0 = {}
    var_0 = module_1.inspect_dataclass_type(
        type_0, none_type_0, str_0, dict_0, none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    str_0 = "m\\"
    complex_0 = 1826.33543 - 1070.5234j
    module_1.inspect_class_type(bool_0, str_0, complex_0, str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    type_0 = module_2.UmlAttribute
    str_0 = "}\x0b(7S\tKFR\r(%Y!5Ua'"
    dict_0 = {}
    none_type_0 = None
    module_1.inspect_dataclass_type(type_0, str_0, str_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    type_0 = module_2.UmlClass
    str_0 = "[UU\x0c:"
    str_1 = '\r0SK3m3IH`Df"'
    var_0 = module_3.isabstract(str_0)
    dict_0 = {str_1: var_0, str_0: var_0, str_1: var_0}
    module_1.inspect_dataclass_type(type_0, str_0, str_0, dict_0, var_0)


def test_case_5():
    list_0 = []
    type_0 = module_2.UmlClass
    str_0 = '0+3x0\r6WCi-{{K?"5r~'
    str_1 = "[UU\x0c:"
    str_2 = '\r0SK3m3IH`Df"'
    var_0 = module_3.isabstract(str_0)
    dict_0 = {str_2: var_0, str_0: var_0, str_2: var_0}
    var_1 = module_1.inspect_dataclass_type(type_0, str_0, str_1, dict_0, list_0)


def test_case_6():
    type_0 = module_2.UmlClass
    str_0 = "MyClass"
    dict_0 = {"attr1": "str", "attr2": "int"}
    module_1.handle_inheritance_relation(type_0, type_0, str_0, dict_0)


# Define some classes to use in the tests
class TestBaseClass:
    pass

class TestClass(TestBaseClass):
    attr1: str
    attr2: int

def test_case_7():
    type_0 = TestClass
    str_0 = "TestClass"
    domain_relations = []
    module_1.handle_inheritance_relation(type_0, str_0, __name__, domain_relations)
    assert len(domain_relations) == 1  # There should be one relation for the base class

def test_case_8():
    type_0 = TestClass
    str_0 = "TestClass"
    domain_items_by_fqn = {}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, __name__, domain_items_by_fqn, domain_relations)
    assert str_0 in domain_items_by_fqn
    assert len(domain_relations) > 0  


@pytest.mark.xfail
def test_case_9():
    type_0 = module_0.str
    str_0 = "str"
    dict_0 = {"attr1": "str", "attr2": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_10():
    type_0 = module_0.str
    str_0 = "str"
    dict_0 = {"attr1": "str", "attr2": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_11():
    type_0 = module_0.str
    str_0 = "str"
    dict_0 = {"attr3": "float", "attr4": "bool"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_12():
    type_0 = module_0.str
    str_0 = "str"
    dict_0 = {"attr5": "str", "attr6": "int", "attr7": "float"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_13():
    type_0 = module_0.str
    str_0 = "str"
    dict_0 = {"attr8": "str", "attr9": "int", "attr10": "float", "attr11": "bool"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_14():
    type_0 = module_0.str
    str_0 = "sasdasdasdstr"
    dict_0 = {"attr14": "str", "attr15": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_15():
    type_0 = module_0.str
    str_0 = "sasdasdsssssssssssssssasdstr"
    dict_0 = {"attr15": "str", "attr17": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)
    
@pytest.mark.xfail
def test_case_16():
    type_0 = module_0.str
    str_0 = "sasdasdasdaaasssaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaastr"
    dict_0 = {"attr19": "str", "attr18": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_17():
    type_0 = module_0.str
    str_0 = "sassdstr"
    dict_0 = {"attr12": "str", "attr5": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)
    
@pytest.mark.xfail
def test_case_18():
    type_0 = module_0.int
    str_0 = "int"
    dict_0 = {"attr20": "str", "attr21": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_19():
    type_0 = module_0.int
    str_0 = "int"
    dict_0 = {"attr22": "str", "attr23": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_20():
    type_0 = module_0.int
    str_0 = "int"
    dict_0 = {"attr24": "str", "attr25": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_21():
    type_0 = module_0.int
    str_0 = "int"
    dict_0 = {"attr26": "str", "attr27": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_22():
    type_0 = module_0.int
    str_0 = "int"
    dict_0 = {"attr28": "str", "attr29": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_23():
    type_0 = module_0.int
    str_0 = "int"
    dict_0 = {"attr30": "str", "attr31": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

class TestSubClass(TestClass):
    attr3: float

def test_case_24():
    type_0 = TestSubClass
    str_0 = "TestSubClass"
    domain_relations = []
    module_1.handle_inheritance_relation(type_0, str_0, __name__, domain_relations)
    assert len(domain_relations) == 1  

def test_case_25():
    type_0 = TestSubClass
    str_0 = "TestSubClass"
    domain_items_by_fqn = {}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, __name__, domain_items_by_fqn, domain_relations)
    assert str_0 in domain_items_by_fqn
    assert len(domain_relations) > 0  

class TestSubClass2(TestSubClass):
    attr4: bool

def test_case_26():
    type_0 = TestSubClass2
    str_0 = "TestSubClass2"
    domain_relations = []
    module_1.handle_inheritance_relation(type_0, str_0, __name__, domain_relations)
    assert len(domain_relations) == 1  

def test_case_27():
    type_0 = TestSubClass2
    str_0 = "TestSubClass2"
    domain_items_by_fqn = {}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, __name__, domain_items_by_fqn, domain_relations)
    assert str_0 in domain_items_by_fqn
    assert len(domain_relations) > 0  

@pytest.mark.xfail
def test_case_28():
    type_0 = module_0.str
    str_0 = "new_str"
    dict_0 = {"attr33": "str", "attr34": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_29():
    type_0 = module_0.int
    str_0 = "new_int"
    dict_0 = {"attr35": "str", "attr36": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

# More classes
class TestClass3:
    attr1: str
    attr2: int
    attr3: float
    attr4: bool
    attr5: str

def test_case_30():
    type_0 = TestClass3
    str_0 = "TestClass3"
    domain_relations = []
    module_1.handle_inheritance_relation(type_0, str_0, __name__, domain_relations)

def test_case_31():
    type_0 = TestClass3
    str_0 = "TestClass3"
    domain_items_by_fqn = {}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, __name__, domain_items_by_fqn, domain_relations)
    assert str_0 in domain_items_by_fqn

@pytest.mark.xfail
def test_case_32():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr32": "str", "attr33": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_33():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr34": "str", "attr35": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_34():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr36": "str", "attr37": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_35():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr38": "str", "attr39": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_36():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr40": "str", "attr41": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_37():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr42": "str", "attr43": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_38():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr44": "str", "attr45": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_39():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr46": "str", "attr47": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_40():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr48": "str", "attr49": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_41():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr50": "str", "attr51": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_42():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr52": "str", "attr53": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_43():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr54": "str", "attr55": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_44():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr56": "str", "attr57": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_45():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr58": "str", "attr59": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_46():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr60": "str", "attr61": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_47():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr62": "str", "attr63": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_48():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr64": "str", "attr65": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_49():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr66": "str", "attr67": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)

@pytest.mark.xfail
def test_case_50():
    type_0 = module_0.float
    str_0 = "float"
    dict_0 = {"attr68": "str", "attr69": "int"}
    domain_relations = []
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, domain_relations)
