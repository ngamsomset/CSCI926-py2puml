# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import umlenum as module_0
import py2puml.domain.umlitem as module_1
import dataclasses as module_2


def test_case_0():
    bytes_0 = b"\xa8\x1c\xb4U\x15\x97\xbf\xa4\x1c\x8e\x1c/\xad\x08\xce\xc5\x18\xdb"
    str_0 = "\n        From a type annotation, derives:\n        - a short version of the type (withenum.TimeUnit -> TimeUnit, Tuple[withenum.TimeUnit] -> Tuple[TimeUnit])\n        - a list of the full-namespaced definitions involved in the type annotation (in order to build the relationships)\n        "
    str_1 = "yK\\C~*BS3Hu<>NLo"
    member_0 = module_0.Member(str_0, str_1)
    str_2 = "\n    Utilitary function which inspects the annotations of the given type\n    "
    uml_item_0 = module_1.UmlItem(str_2, str_2)
    var_0 = member_0.__repr__()
    var_1 = uml_item_0.__repr__()
    var_2 = var_1.__eq__(bytes_0)
    var_3 = var_2.__eq__(bytes_0)
    var_4 = var_3.__eq__(bytes_0)
    var_5 = var_1.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_4.__eq__(bytes_0)
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__repr__()
    var_11 = var_10.__eq__(bytes_0)
    dict_0 = {bytes_0: bytes_0}
    int_0 = 357
    bytes_1 = b"\xa3\x83Q"
    int_1 = -2568
    var_12 = var_6.__eq__(bytes_1)
    var_13 = var_1.__eq__(var_3)
    var_14 = var_3.__eq__(bytes_0)
    var_15 = var_4.__eq__(var_14)
    str_3 = ";*#U?E@iA O\ti@\\5"
    uml_item_1 = module_1.UmlItem(str_3, str_3)
    var_16 = uml_item_1.__repr__()
    var_17 = var_16.__repr__()
    var_18 = member_0.__eq__(var_12)
    var_19 = var_17.__eq__(int_1)
    var_20 = var_19.__repr__()
    var_21 = var_12.__eq__(var_14)
    var_22 = var_20.__eq__(bytes_1)
    var_23 = var_22.__eq__(int_0)
    var_24 = var_19.__repr__()
    var_25 = var_23.__eq__(dict_0)


def test_case_1():
    bool_0 = False
    str_0 = "dF\\t02=D?s<*<"
    bool_1 = False
    member_0 = module_0.Member(str_0, bool_0)
    var_0 = module_2.dataclass(init=bool_1, repr=str_0, slots=bool_1)
    var_1 = var_0.__eq__(bool_0)
    var_2 = var_0.__repr__()
    member_1 = module_0.Member(var_0, str_0)
    str_1 = "~!s5!Neufg"
    str_2 = '$C"O.'
    uml_item_0 = module_1.UmlItem(str_1, str_2)
    var_3 = member_0.__repr__()
    var_4 = var_2.__eq__(var_2)
    var_5 = uml_item_0.__eq__(str_0)
    var_6 = var_5.__repr__()
    var_7 = member_1.__eq__(var_6)
    var_8 = var_7.__repr__()
    var_9 = var_5.__eq__(uml_item_0)
    var_10 = var_5.__eq__(bool_0)
    var_11 = var_0.__repr__()
    list_0 = [var_10, var_10]
    uml_enum_0 = module_0.UmlEnum(bool_0, str_0, list_0)
    var_12 = var_5.__repr__()
    var_13 = member_0.__eq__(var_4)
    str_3 = "W"
    str_4 = "Q9$v=;p2m5\rz/Cp\rd&"
    member_2 = module_0.Member(str_4, str_4)
    uml_enum_1 = module_0.UmlEnum(str_3, str_4, str_3)
    member_3 = module_0.Member(uml_item_0, var_2)
    var_14 = member_2.__eq__(list_0)
    var_15 = var_7.__repr__()
    var_16 = var_5.__repr__()


def test_case_2():
    str_0 = "V's"
    member_0 = module_0.Member(str_0, str_0)
    none_type_0 = None
    var_0 = module_2.dataclass(init=str_0, match_args=str_0)
    var_1 = var_0.__eq__(member_0)
    var_2 = var_0.__eq__(none_type_0)
    var_3 = var_2.__repr__()
    var_4 = member_0.__eq__(str_0)
    var_5 = member_0.__eq__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "sy`(uA]\rfSTqs\\hVHX"
    member_0 = module_0.Member(str_0, str_0)
    var_0 = member_0.__repr__()
    var_1 = var_0.__repr__()
    list_0 = [var_1]
    uml_enum_0 = module_0.UmlEnum(str_0, str_0, list_0)
    int_0 = -2091
    var_2 = var_1.__eq__(int_0)
    list_1 = [int_0]
    module_2.dataclass(list_1, eq=list_1, order=list_1, kw_only=int_0)

def test_case_4():
    member1 = module_0.Member("enum1", "value1")
    assert repr(member1) == "Member(name='enum1', value='value1')"

def test_case_5():
    member1 = module_0.Member("enum1", "value1")
    member2 = module_0.Member("enum2", "value2")
    assert member1 != member2

def test_case_6():
    member1 = module_0.Member("enum1", "value1")
    member2 = module_0.Member("enum1", "value1")
    assert member1 == member2

def test_case_7():
    member1 = module_0.Member("enum1", "value1")
    member2 = module_0.Member("enum1", "value2")
    assert member1 != member2

@pytest.mark.xfail(strict=True)
def test_case_8():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum", "namespace", members)
    assert repr(uml_enum) == "UmlEnum(name='enum', namespace='namespace', members=[Member(name='enum1', value='value1'), Member(name='enum2', value='value2')])"

def test_case_9():
    members1 = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum1 = module_0.UmlEnum("enum", "namespace", members1)
    
    members2 = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum2 = module_0.UmlEnum("enum", "namespace", members2)
    
    assert uml_enum1 == uml_enum2

def test_case_10():
    members1 = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum1 = module_0.UmlEnum("enum", "namespace", members1)
    
    members2 = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value3")]
    uml_enum2 = module_0.UmlEnum("enum", "namespace", members2)
    
    assert uml_enum1 != uml_enum2

def test_case_11():
    member = module_0.Member("enum1", "value1")
    assert member.name == "enum1"
    assert member.value == "value1"

def test_case_12():
    member = module_0.Member("enum1", "value1")
    assert repr(member) != "Member(name='enum2', value='value2')"

def test_case_13():
    members = [module_0.Member("enum1", "value1")]
    uml_enum = module_0.UmlEnum("enum", "namespace", members)
    assert len(uml_enum.members) == 1

def test_case_14():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum", "namespace", members)
    assert len(uml_enum.members) == 2

def test_case_15():
    member1 = module_0.Member("enum1", "value1")
    member2 = module_0.Member("enum2", "value2")
    assert member1 != member2

def test_case_16():
    members1 = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum1 = module_0.UmlEnum("enum", "namespace", members1)
    
    members2 = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2"), module_0.Member("enum3", "value3")]
    uml_enum2 = module_0.UmlEnum("enum", "namespace", members2)
    
    assert uml_enum1 != uml_enum2

def test_case_17():
    member = module_0.Member("enum1", "value1")
    assert member.value != "value2"

def test_case_18():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2"), module_0.Member("enum3", "value3")]
    uml_enum = module_0.UmlEnum("enum", "namespace", members)
    assert len(uml_enum.members) == 3

def test_case_19():
    member1 = module_0.Member("enum1", "value1")
    member2 = module_0.Member("enum1", "value1")
    assert member1 == member2

def test_case_20():
    members1 = [module_0.Member("enum1", "value1")]
    uml_enum1 = module_0.UmlEnum("enum", "namespace", members1)
    
    members2 = [module_0.Member("enum2", "value2")]
    uml_enum2 = module_0.UmlEnum("enum", "namespace", members2)
    
    assert uml_enum1 != uml_enum2

def test_case_21():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.name == "enum1"
    
def test_case_22():
    member = module_0.Member("enum1", "value1")
    assert member.name == "enum1"

def test_case_23():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.members[0] == module_0.Member("enum1", "value1")

def test_case_24():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.members[1] == module_0.Member("enum2", "value2")

def test_case_25():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert len(uml_enum.members) == 2

def test_case_26():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.members != [module_0.Member("enum2", "value2"), module_0.Member("enum1", "value1")]

def test_case_27():
    member = module_0.Member("enum1", "value1")
    assert member != module_0.Member("enum1", "value2")

def test_case_28():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.name != "enum2"

def test_case_29():
    member = module_0.Member("enum1", "value1")
    assert member != module_0.Member("enum2", "value1")

def test_case_30():
    member = module_0.Member("enum1", "value1")
    assert member.name != "enum2"

def test_case_32():
    member = module_0.Member("enum1", "value1")
    assert member.name == "enum1"
    
def test_case_32():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.name == "enum1"

def test_case_33():
    member = module_0.Member("enum1", "value1")
    assert member.value == "value1"

def test_case_34():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.name != "namespace"

def test_case_35():
    member = module_0.Member("enum1", "value1")
    assert member.name != "enum2"

def test_case_36():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.name != "enum2"


def test_case_37():
    member = module_0.Member("enum1", "value1")
    assert member.value != "value2"

def test_case_38():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert uml_enum.name != "namespace1"

def test_case_39():
    member = module_0.Member("enum1", "value1")
    assert repr(member) == "Member(name='enum1', value='value1')"

def test_case_40():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert repr(uml_enum) != "UmlEnum(title='enum1', namespace='namespace', members=[Member(name='enum1', value='value1'), Member(name='enum2', value='value2')])"

def test_case_41():
    member = module_0.Member("enum1", "value1")
    assert repr(member) != "Member(name='enum1', value='value2')"

def test_case_42():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert repr(uml_enum) != "UmlEnum(title='enum1', namespace='namespace', members=[Member(name='enum1', value='value2'), Member(name='enum2', value='value2')])"

def test_case_43():
    member = module_0.Member("enum1", "value1")
    assert repr(member) != "Member(name='enum2', value='value1')"

def test_case_44():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert repr(uml_enum) != "UmlEnum(title='enum2', namespace='namespace', members=[Member(name='enum1', value='value1'), Member(name='enum2', value='value2')])"

def test_case_45():
    member = module_0.Member("enum1", "value1")
    assert repr(member) == "Member(name='enum1', value='value1')"

def test_case_46():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert repr(uml_enum) != "UmlEnum(title='enum1', namespace='namespace1', members=[Member(name='enum1', value='value1'), Member(name='enum2', value='value2')])"

def test_case_47():
    member = module_0.Member("enum1", "value1")
    assert str(member) == "Member(name='enum1', value='value1')"

def test_case_48():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert str(uml_enum) != "UmlEnum(title='enum1', namespace='namespace', members=[Member(name='enum1', value='value1'), Member(name='enum2', value='value2')])"

def test_case_49():
    member = module_0.Member("enum1", "value1")
    assert str(member) != "Member(name='enum1', value='value2')"

def test_case_50():
    members = [module_0.Member("enum1", "value1"), module_0.Member("enum2", "value2")]
    uml_enum = module_0.UmlEnum("enum1", "namespace", members)
    assert str(uml_enum) != "UmlEnum(title='enum1', namespace='namespace', members=[Member(name='enum1', value='value2'), Member(name='enum2', value='value2')])"
