# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import py2puml.domain.umlitem as module_0
import namespace as module_1
import random

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    bool_0 = True
    bytes_0 = b"\x82.e\x1e\xf5:\xceb\xc9'x\xa1\x9c&"
    tuple_0 = (bool_0, bool_0, bytes_0)
    list_0 = [tuple_0, bytes_0, bool_0, none_type_0]
    str_0 = '\t/OQvr^oi~&"W_o'
    str_1 = ":1.e,V'X:H$\"bYU{9n|"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    var_0 = list_0.__eq__(list_0)
    var_1 = var_0.__eq__(none_type_0)
    module_1.build_packages_structure(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    iterable_0 = module_1.puml_namespace_content(none_type_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    str_0 = ": it needs to be imported explicitely."
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0, uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    assert (
        f"{type(package_0).__module__}.{type(package_0).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_0.name is None
    assert (
        f"{type(package_0.children).__module__}.{type(package_0.children).__qualname__}"
        == "builtins.list"
    )
    assert len(package_0.children) == 1
    assert package_0.items_number == 0
    str_1 = "\n[K:UF,6W\n9\r"
    str_2 = "??U/\x0c"
    iterable_1 = module_1.puml_namespace_content(list_0)
    package_1 = module_1.get_or_create_module_package(package_0, iterable_1)
    assert len(package_0.children) == 2
    assert (
        f"{type(package_1).__module__}.{type(package_1).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_1.name == "namespace : it needs to be imported explicitely {}\n"
    assert package_1.children == []
    assert package_1.items_number == 0
    str_3 = "<|"
    uml_item_1 = module_0.UmlItem(str_3, str_3)
    iterable_2 = module_1.puml_namespace_content(list_0)
    var_0 = uml_item_1.__repr__()
    iterable_3 = module_1.visit_package(none_type_0, str_2, iterable_2)
    module_1.get_or_create_module_package(str_1, iterable_2)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    iterable_0 = module_1.puml_namespace_content(none_type_0)
    assert module_1.INDENT == "  " 
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    str_0 = ": it needs to be imported explicitely."
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    assert (
        f"{type(package_0).__module__}.{type(package_0).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_0.name is None
    assert (
        f"{type(package_0.children).__module__}.{type(package_0.children).__qualname__}"
        == "builtins.list"
    )
    assert len(package_0.children) == 1
    assert package_0.items_number == 0
    str_1 = "\n[K:UF,6W\n9\r"
    str_2 = "??U/\x0c"
    var_0 = package_0.__repr__()
    assert (
        var_0
        == "Package(name=None, children=[Package(name=': it needs to be imported explicitely', children=[], items_number=2)], items_number=0)"
    )
    package_1 = module_1.get_or_create_module_package(package_0, var_0)
    assert len(package_0.children) == 2
    assert package_1.name == ")"
    assert package_1.items_number == 0
    uml_item_1 = module_0.UmlItem(var_0, var_0)
    assert (
        uml_item_1.name
        == "Package(name=None, children=[Package(name=': it needs to be imported explicitely', children=[], items_number=2)], items_number=0)"
    )
    assert (
        uml_item_1.fqn
        == "Package(name=None, children=[Package(name=': it needs to be imported explicitely', children=[], items_number=2)], items_number=0)"
    )
    iterable_1 = module_1.puml_namespace_content(list_0)
    var_1 = uml_item_0.__eq__(var_0)
    iterable_2 = module_1.visit_package(none_type_0, str_2, iterable_1)
    module_1.get_or_create_module_package(str_1, iterable_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    iterable_0 = module_1.puml_namespace_content(none_type_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    list_0 = []
    iterable_1 = module_1.puml_namespace_content(none_type_0)
    iterable_2 = module_1.puml_namespace_content(list_0)
    iterable_3 = module_1.puml_namespace_content(iterable_2)
    package_0 = module_1.build_packages_structure(list_0)
    package_1 = module_1.build_packages_structure(iterable_3)
    assert (
        f"{type(package_1).__module__}.{type(package_1).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_1.name is None
    assert package_1.children == []
    assert package_1.items_number == 0
    package_2 = module_1.build_packages_structure(list_0)
    var_0 = package_2.__repr__()
    var_1 = iterable_0.__repr__()
    iterable_4 = module_1.visit_package(iterable_3, list_0, var_1)
    iterable_5 = module_1.visit_package(var_0, var_0, var_0)
    package_3 = module_1.build_packages_structure(list_0)
    iterable_6 = module_1.puml_namespace_content(list_0)
    var_2 = package_2.__eq__(package_2)
    module_1.build_packages_structure(var_2)


def test_case_4():
    pass

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    iterable_0 = module_1.puml_namespace_content(none_type_0)
    assert module_1.INDENT == "  "
    assert module_1.PUML_NAMESPACE_START_TPL == "{indentation}namespace {namespace_name} {{"
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    list_0 = [none_type_0, none_type_0]
    iterable_1 = module_1.puml_namespace_content(list_0)
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.__repr__()
    var_1 = iterable_0.__repr__()
    iterable_2 = module_1.visit_package(iterable_1, list_0, var_1)
    module_1.get_or_create_module_package(package_0, iterable_2)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    str_0 = 'some_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.__repr__()
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    str_0 = 'some_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.__eq__(none_type_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(var_0, iterable_0)


def test_case_8():
    str_0 = 'another_string'
    str_1 = 'some_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    list_0 = [uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(package_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'another_string'
    str_1 = 'some_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    list_0 = [uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_1, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    iterable_0 = module_1.puml_namespace_content(none_type_0)
    assert module_1.INDENT == "  "
    assert module_1.PUML_NAMESPACE_START_TPL == "{indentation}namespace {namespace_name} {{"
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    list_0 = [none_type_0, none_type_0]
    iterable_1 = module_1.puml_namespace_content(list_0)
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.repr()
    var_1 = iterable_0.repr()
    iterable_2 = module_1.visit_package(iterable_1, list_0, var_1)
    module_1.build_packages_structure(iterable_2)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    str_0 = 'unique_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.repr()
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(none_type_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'test_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.eq(uml_item_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    str_0 = 'random_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.repr()
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(none_type_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'another_string'
    str_1 = 'some_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    list_0 = [uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_0, iterable_0)
       
@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'test_string_1'
    str_1 = 'test_string_2'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    list_0 = [uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'new_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.__repr__()
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(var_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    str_0 = 'unique_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, none_type_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.__repr__()
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(var_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'test_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'another_string'
    str_1 = 'yet_another_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    list_0 = [uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    iterable_0 = module_1.puml_namespace_content(none_type_0)
    assert module_1.INDENT == "  "
    assert module_1.PUML_NAMESPACE_START_TPL == "{indentation}namespace {namespace_name} {{"
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    list_0 = [none_type_0, none_type_0]
    iterable_1 = module_1.puml_namespace_content(list_0)
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.__repr__()
    var_1 = iterable_0.__repr__()
    iterable_2 = module_1.visit_package(iterable_1, list_0, var_1)
    module_1.build_packages_structure(iterable_2)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'random_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.repr()
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(var_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'test_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    str_0 = 'random_string'
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, none_type_0]
    package_0 = module_1.build_packages_structure(list_0)
    var_0 = package_0.repr()
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(var_0, iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'another_string'
    str_1 = 'some_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    list_0 = [uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    iterable_0 = module_1.puml_namespace_content(list_0)
    module_1.get_or_create_module_package(str_0, iterable_0)
    
def test_case_25():
    str_0 = 'test_string'
    str_1 = 'test_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_26():
    str_0 = 'another_string'
    str_1 = 'another_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_27():
    str_0 = 'uml_item_string'
    str_1 = 'uml_item_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_28():
    str_0 = 'yet_another_string'
    str_1 = 'yet_another_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_29():
    str_0 = 'new_string'
    str_1 = 'new_string'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_30():
    str_0 = 'test_string_2'
    str_1 = 'test_string_2'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_31():
    str_0 = 'string_1'
    str_1 = 'string_1'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_32():
    str_0 = 'string_2'
    str_1 = 'string_2'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_33():
    str_0 = 'string_3'
    str_1 = 'string_3'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_34():
    str_0 = 'string_4'
    str_1 = 'string_4'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_35():
    str_0 = 'string_5'
    str_1 = 'string_5'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_36():
    str_0 = 'string_6'
    str_1 = 'string_6'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = 'string_7'
    str_1 = 'string_8'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_1
    assert uml_item_0.fqn == str_0

def test_case_38():
    str_0 = 'string_9'
    str_1 = 'string_9'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = 'string_10'
    str_1 = 'string_11'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_1
    assert uml_item_0.fqn == str_0

def test_case_40():
    str_0 = 'string_12'
    str_1 = 'string_12'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = 'string_13'
    str_1 = 'string_14'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_1
    assert uml_item_0.fqn == str_0

def test_case_42():
    str_0 = 'string_15'
    str_1 = 'string_15'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = 'string_16'
    str_1 = 'string_17'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_1
    assert uml_item_0.fqn == str_0

def test_case_44():
    str_0 = 'string_18'
    str_1 = 'string_18'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = 'string_19'
    str_1 = 'string_20'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_1
    assert uml_item_0.fqn == str_0

def test_case_46():
    str_0 = 'string_21'
    str_1 = 'string_21'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = 'string_22'
    str_1 = 'string_23'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_1
    assert uml_item_0.fqn == str_0

def test_case_48():
    str_0 = 'string_24'
    str_1 = 'string_24'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

@pytest.mark.xfail(strict=True)
def test_case_49():
    str_0 = 'string_25'
    str_1 = 'string_26'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_1
    assert uml_item_0.fqn == str_0

def test_case_50():
    str_0 = 'string_27'
    str_1 = 'string_27'
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1