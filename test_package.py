# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import package as module_0
import dataclasses as module_1

@pytest.mark.xfail
def test_case_0():
    str_0 = ":\x0c"
    list_0 = [str_0]
    bool_0 = False
    package_0 = module_0.Package(list_0, list_0, bool_0)
    assert module_0.Package.items_number == 0
    var_0 = package_0.__repr__()
    none_type_0 = None
    list_1 = [none_type_0, none_type_0, none_type_0]
    bool_1 = False
    tuple_0 = (bool_1, bool_1)
    tuple_1 = (none_type_0, list_1, tuple_0)
    var_1 = module_1.field(
        default_factory=none_type_0, compare=tuple_1, metadata=none_type_0
    )
    var_2 = var_1.__repr__()
    var_3 = module_1.field(init=list_1)
    module_1.field(default=var_2, compare=var_3, metadata=bool_1)

def test_case_1():
    package_1 = module_0.Package('Package 1')
    assert package_1.name == 'Package 1'
    assert package_1.children == []
    assert package_1.items_number == 0

def test_case_2():
    child_package = module_0.Package('Child Package')
    package_2 = module_0.Package('Package 2', [child_package])
    assert package_2.name == 'Package 2'
    assert package_2.children == [child_package]
    assert package_2.items_number == 0

def test_case_3():
    package_3 = module_0.Package('Package 3')
    child_package_1 = module_0.Package('Child Package 1')
    child_package_2 = module_0.Package('Child Package 2')
    package_3.children.extend([child_package_1, child_package_2])
    assert len(package_3.children) == 2

def test_case_4():
    package_4 = module_0.Package('Package 4', items_number=10)
    assert package_4.items_number == 10

def test_case_5():
    package_5 = module_0.Package('Package 5', items_number=5)
    package_5.items_number += 5
    assert package_5.items_number == 10

def test_case_6():
    package_6 = module_0.Package('Package 6')
    child_package_1 = module_0.Package('Child Package 1')
    package_6.children.append(child_package_1)
    assert len(package_6.children) == 1

def test_case_7():
    package_7 = module_0.Package('Package 7')
    child_package_1 = module_0.Package('Child Package 1')
    package_7.children.append(child_package_1)
    assert package_7.children[0].name == 'Child Package 1'

def test_case_8():
    package_8 = module_0.Package('Package 8')
    package_8.items_number = 50
    assert str(package_8) == "Package(name='Package 8', children=[], items_number=50)"

def test_case_9():
    child_package = module_0.Package('Child Package')
    package_9 = module_0.Package('Package 9', [child_package], 5)
    assert str(package_9) == "Package(name='Package 9', children=[Package(name='Child Package', children=[], items_number=0)], items_number=5)"

def test_case_10():
    child_package = module_0.Package('Child Package')
    package_10 = module_0.Package('Package 10', [child_package], 5)
    assert str(package_10.children[0]) == "Package(name='Child Package', children=[], items_number=0)"

def test_case_11():
    package_11 = module_0.Package('Package 11')
    assert isinstance(package_11, module_0.Package)

def test_case_12():
    child_package = module_0.Package('Child Package')
    package_12 = module_0.Package('Package 12', [child_package])
    assert isinstance(package_12.children[0], module_0.Package)

def test_case_13():
    package_13 = module_0.Package('Package 13')
    child_package_1 = module_0.Package('Child Package 1')
    child_package_2 = module_0.Package('Child Package 2')
    package_13.children.extend([child_package_1, child_package_2])
    assert child_package_1 in package_13.children and child_package_2 in package_13.children

def test_case_14():
    package_14 = module_0.Package('Package 14', items_number=10)
    package_14.items_number += 5
    assert package_14.items_number == 15

def test_case_15():
    package_15 = module_0.Package('Package 15', items_number=10)
    package_15.items_number -= 5
    assert package_15.items_number == 5

def test_case_16():
    package_16 = module_0.Package('Package 16')
    child_package_1 = module_0.Package('Child Package 1')
    package_16.children.append(child_package_1)
    assert child_package_1 in package_16.children

def test_case_17():
    package_17 = module_0.Package('Package 17')
    child_package_1 = module_0.Package('Child Package 1')
    package_17.children.append(child_package_1)
    assert 'Child Package 1' in [child.name for child in package_17.children]

def test_case_18():
    package_18 = module_0.Package('Package 18')
    package_18.items_number = 100
    assert package_18.items_number == 100

def test_case_19():
    child_package = module_0.Package('Child Package', items_number=5)
    package_19 = module_0.Package('Package 19', [child_package], 10)
    assert package_19.items_number == 10 and child_package.items_number == 5

def test_case_20():
    package_20 = module_0.Package('Package 20')
    assert package_20.children == []

@pytest.mark.xfail
def test_case_21():
    package_21 = module_0.Package('Package 21', items_number=-1)
    assert package_21.items_number >= 0

@pytest.mark.xfail
def test_case_22():
    package_22 = module_0.Package('Package 22', children='Not a list')
    assert isinstance(package_22.children, list)

@pytest.mark.xfail
def test_case_23():
    package_23 = module_0.Package(23)
    assert isinstance(package_23.name, str)

@pytest.mark.xfail
def test_case_24():
    package_24 = module_0.Package('Package 24', children=['Not a package'])
    assert all(isinstance(child, module_0.Package) for child in package_24.children)

@pytest.mark.xfail
def test_case_25():
    package_25 = module_0.Package('Package 25', items_number='Not an integer')
    assert isinstance(package_25.items_number, int)

@pytest.mark.xfail
def test_case_26():
    package_26 = module_0.Package('Package 26')
    package_27 = module_0.Package('Package 26')
    assert package_26.name != package_27.name


def test_case_27():
    package_27 = module_0.Package('Package 27')
    child_package = module_0.Package('Child Package', [package_27])
    assert child_package not in package_27.children

@pytest.mark.xfail
def test_case_28():
    package_28 = module_0.Package('Package 28', items_number=1)
    package_28.items_number -= 2
    assert package_28.items_number >= 0

@pytest.mark.xfail
def test_case_29():
    package_29 = module_0.Package('Package 29')
    package_29.children.append(package_29)
    assert package_29 not in package_29.children

@pytest.mark.xfail
def test_case_30():
    package_30 = module_0.Package('Package 30', children=None)
    assert package_30.children is not None

@pytest.mark.xfail
def test_case_31():
    package_31 = module_0.Package('Package 31')
    package_31.children.append('not a package')
    assert all(isinstance(child, module_0.Package) for child in package_31.children)

@pytest.mark.xfail
def test_case_32():
    package_32 = module_0.Package('')
    assert len(package_32.name) > 0

@pytest.mark.xfail
def test_case_33():
    package_33 = module_0.Package('Package#33')
    assert not any(c in string.punctuation for c in package_33.name)

@pytest.mark.xfail
def test_case_34():
    package_34 = module_0.Package('Package 34', items_number=2.7)
    assert isinstance(package_34.items_number, int)

@pytest.mark.xfail
def test_case_35():
    package_35 = module_0.Package('Package 35', items_number='twenty')
    assert isinstance(package_35.items_number, int)

@pytest.mark.xfail
def test_case_36():
    package_36 = module_0.Package('Package 36', items_number=2+3j)
    assert isinstance(package_36.items_number, int)

@pytest.mark.xfail
def test_case_37():
    package_37 = module_0.Package(37)
    assert isinstance(package_37.name, str)

@pytest.mark.xfail
def test_case_38():
    package_38 = module_0.Package(None)
    assert isinstance(package_38.name, str)

@pytest.mark.xfail
def test_case_39():
    package_39 = module_0.Package(True)
    assert isinstance(package_39.name, str)

@pytest.mark.xfail
def test_case_40():
    package_40 = module_0.Package('Package 40', items_number=1)
    package_40.items_number += 1.5
    assert isinstance(package_40.items_number, int)

@pytest.mark.xfail
def test_case_41():
    package_41 = module_0.Package('Package 41', items_number=1)
    package_41.items_number -= 1.5
    assert isinstance(package_41.items_number, int)

@pytest.mark.xfail
def test_case_42():
    package_42 = module_0.Package('Package 42', items_number=1)
    package_42.items_number += '1'
    assert isinstance(package_42.items_number, int)

@pytest.mark.xfail
def test_case_43():
    package_43 = module_0.Package('Package 43', items_number=1)
    package_43.items_number -= '1'
    assert isinstance(package_43.items_number, int)

@pytest.mark.xfail
def test_case_44():
    package_44 = module_0.Package('Package 44', items_number=1)
    package_44.items_number += 1+1j
    assert isinstance(package_44.items_number, int)

@pytest.mark.xfail
def test_case_45():
    package_45 = module_0.Package('Package 45', items_number=1)
    package_45.items_number -= 1+1j
    assert isinstance(package_45.items_number, int)

@pytest.mark.xfail
def test_case_46():
    package_46 = module_0.Package('Package 46', items_number=1)
    package_46.items_number += True
    assert isinstance(package_46.items_number, int)

@pytest.mark.xfail
def test_case_47():
    package_47 = module_0.Package('Package 47', items_number=1)
    package_47.items_number -= True
    assert isinstance(package_47.items_number, int)

@pytest.mark.xfail
def test_case_48():
    package_48 = module_0.Package('Package 48', items_number=-1)
    package_48.items_number += -2
    assert package_48.items_number >= 0

@pytest.mark.xfail
def test_case_49():
    package_49 = module_0.Package('Package 49', items_number=1)
    package_49.items_number -= 2
    assert package_49.items_number >= 0

@pytest.mark.xfail
def test_case_50():
    package_50 = module_0.Package('Package 50')
    package_50.children.append(package_50)
    assert package_50 not in package_50.children

def test_case_51():
    package = module_0.Package("TestPackage")
    assert isinstance(package, module_0.Package)
    assert package.name == "TestPackage"
    assert package.items_number == 0
    assert len(package.children) == 0

def test_case_52():
    package = module_0.Package("TestPackage", [], 5)
    assert isinstance(package, module_0.Package)
    assert package.name == "TestPackage"
    assert package.items_number == 5
    assert len(package.children) == 0

def test_case_53():
    child_package = module_0.Package("ChildPackage")
    package = module_0.Package("TestPackage", [child_package])
    assert len(package.children) == 1
    assert package.children[0].name == "ChildPackage"

def test_case_54():
    package = module_0.Package("TestPackage", [], 10)
    assert isinstance(package, module_0.Package)
    assert package.items_number == 10

def test_case_55():
    child_package = module_0.Package("ChildPackage", [], 3)
    package = module_0.Package("TestPackage", [child_package], 10)
    assert len(package.children) == 1
    assert package.items_number == 10
    assert package.children[0].items_number == 3

def test_case_56():
    child_package = module_0.Package("ChildPackage", [], 3)
    package = module_0.Package("TestPackage", [child_package], 7)
    assert package.items_number == 7
    assert package.children[0].items_number == 3

def test_case_57():
    child_package = module_0.Package("ChildPackage")
    package = module_0.Package("TestPackage", [child_package, child_package])
    assert len(package.children) == 2

@pytest.mark.xfail
def test_case_58():
    with pytest.raises(TypeError):
        package = module_0.Package(123, [], 10)
@pytest.mark.xfail
def test_case_59():
    with pytest.raises(TypeError):
        package = module_0.Package("TestPackage", "not a list", 10)
@pytest.mark.xfail
def test_case_60():
    with pytest.raises(TypeError):
        package = module_0.Package("TestPackage", [], "not an integer")

@pytest.mark.xfail
def test_case_61():
    package = module_0.Package("TestPackage", [], 10)
    package.items_number = "not an integer"

@pytest.mark.xfail
def test_case_62():
    package = module_0.Package("TestPackage", [], 10)
    package.name = 123

@pytest.mark.xfail
def test_case_63():
    package = module_0.Package("TestPackage", [], 10)
    package.children = "not a list"

@pytest.mark.xfail
def test_case_64():
    package = module_0.Package("TestPackage", [], 10)
    package.children = [123]

@pytest.mark.xfail
def test_case_65():
    package = module_0.Package("TestPackage")
    package.children.append(123)

@pytest.mark.xfail
def test_case_66():
    package = module_0.Package("TestPackage", [123])

@pytest.mark.xfail
def test_case_67():
    package = module_0.Package(123)

@pytest.mark.xfail
def test_case_68():
    package = module_0.Package("TestPackage", "not a list")

@pytest.mark.xfail
def test_case_69():
    module_0.Package(123, [], 123)

@pytest.mark.xfail
def test_case_70():
    package = module_0.Package("TestPackage", [123], 10)
