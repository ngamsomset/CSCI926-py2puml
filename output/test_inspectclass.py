# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import py2puml.domain.umlitem as module_0
import inspectclass as module_1
import builtins as module_2
import enum as module_3
import py2puml.parsing.moduleresolver as module_4
import dataclasses as module_5
import py2puml.domain.umlclass as module_6


@pytest.mark.xfail(strict=True)
def test_case_0():
    type_0 = module_0.UmlItem
    str_0 = "\n    Adds the definitions:\n    - of the inspected type\n    - o its static attibutes from the class annotations (type and relation)\n    "
    str_1 = ""
    module_1.handle_inheritance_relation(type_0, str_0, str_1, str_0)


def test_case_1():
    type_0 = module_2.dict
    str_0 = ")xyX`d`E/Ky?K%H"
    var_0 = module_1.handle_inheritance_relation(type_0, type_0, str_0, type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    type_0 = module_3.Enum
    module_1.handle_inheritance_relation(type_0, type_0, type_0, type_0)


def test_case_3():
    str_0 = ")xyX`d`E/Ky?K%H"
    var_0 = module_1.handle_inheritance_relation(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    type_0 = module_4.NamespacedType
    str_0 = "rK9|RLO\rsR-Y"
    dict_0 = {str_0: str_0}
    module_1.inspect_class_type(type_0, str_0, str_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_5.dataclass()
    dict_0 = {}
    module_1.inspect_class_type(var_0, var_0, var_0, dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    type_0 = module_2.int
    var_0 = module_5.dataclass()
    dict_0 = {}
    bool_0 = False
    module_1.inspect_class_type(type_0, type_0, type_0, dict_0, bool_0)


def test_case_7():
    none_type_0 = None
    str_0 = " in module "
    bool_0 = False
    uml_attribute_0 = module_6.UmlAttribute(str_0, str_0, bool_0)
    type_0 = module_2.bytes
    str_1 = "_fields"
    str_2 = "~"
    dict_0 = {str_0: none_type_0, str_2: none_type_0, none_type_0: none_type_0}
    var_0 = module_1.inspect_dataclass_type(type_0, str_1, str_1, dict_0, str_1)
    var_1 = var_0.__repr__()
    list_0 = [var_1]
    var_2 = module_1.handle_inheritance_relation(str_0, str_0, none_type_0, list_0)


def test_case_8():
    pass


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    module_1.inspect_class_type(list_0, list_0, list_0, list_0, list_0)
