# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import builtins as module_0
import inspectnamedtuple as module_1
import py2puml.domain.umlclass as module_2
import py2puml.domain.umlitem as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    set_0 = set()
    str_0 = "mSX$|c 9: ?W6X"
    str_1 = "k#\r[?#FGqFs"
    dict_0 = {str_0: set_0, str_1: set_0, str_1: set_0}
    type_0 = module_0.bool
    module_1.inspect_namedtuple_type(type_0, set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1104
    dict_0 = {}
    module_1.inspect_namedtuple_type(int_0, int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    type_0 = module_0.bytes
    dict_0 = {}
    module_1.inspect_namedtuple_type(type_0, type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    type_0 = module_2.UmlClass
    str_0 = "zH'\"-$xo<KY^Z"
    str_1 = "ed"
    uml_class_0 = module_2.UmlClass(str_1, str_1, str_0)
    var_0 = uml_class_0.__eq__(type_0)
    var_1 = var_0.__repr__()
    var_2 = var_1.__eq__(str_0)
    var_3 = var_2.__repr__()
    uml_class_1 = module_2.UmlClass(var_0, var_1, var_2)
    str_2 = "Y:d\t"
    dict_0 = {str_1: var_3, var_1: uml_class_1, str_2: var_2}
    module_1.inspect_namedtuple_type(type_0, str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    type_0 = module_0.object
    str_0 = "\x0c#n!A#Inz"
    module_1.inspect_namedtuple_type(type_0, str_0, type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    type_0 = module_3.UmlItem
    str_0 = "zi,\x0b?\rmxt4(RH=eP(zwt"
    str_1 = ";xlu,{pMaislVR3R+"
    uml_class_0 = module_2.UmlClass(str_0, str_1, str_1)
    var_0 = uml_class_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__eq__(type_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__eq__(str_0)
    str_2 = "-v"
    dict_0 = {str_0: var_6, str_2: var_6, var_0: var_3, str_0: var_5}
    module_1.inspect_namedtuple_type(type_0, str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    type_0 = module_0.int
    str_0 = '"55'
    none_type_0 = None
    bool_0 = True
    uml_attribute_0 = module_2.UmlAttribute(type_0, none_type_0, bool_0)
    var_0 = uml_attribute_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__eq__(str_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__eq__(str_0)
    str_1 = "`D\rv<g(Y<xU@7M';)`TF"
    dict_0 = {str_0: var_4, var_3: var_1, str_1: var_0, var_3: var_3}
    module_1.inspect_namedtuple_type(type_0, type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 0
    str_0 = "~1"
    module_1.inspect_namedtuple_type(int_0, str_0, int_0)
