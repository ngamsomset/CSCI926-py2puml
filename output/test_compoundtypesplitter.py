# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import compoundtypesplitter as module_0
import builtins as module_1
import re as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -170.8
    module_0.remove_forward_references(float_0, float_0)


def test_case_1():
    str_0 = "\n    In the string representation of a compound type annotation, the elementary types can be prefixed by their packages or sub-packages.\n    Like in 'Dict[datetime.datetime,typing.List[Worker]]'. This function returns a tuple of 2 values:\n    - a string representation with shortened types for display purposes in the PlantUML documentation: 'Dict[datetime, List[Worker]]'\n      (note: a space is inserted after each coma for readability sake)\n    - a list of the fully-qualified types involved in the annotation: ['typing.Dict', 'datetime.datetime', 'typing.List', 'mymodule.Worker']\n    "
    with pytest.raises(ValueError):
        module_0.CompoundTypeSplitter(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -2368
    str_0 = "__bases__"
    str_1 = module_0.remove_forward_references(str_0, int_0)
    assert str_1 == "__bases__"
    assert module_0.SPLITTING_CHARACTERS == ("[", "]", ",")
    str_2 = module_0.remove_forward_references(str_1, str_0)
    module_2.compile(int_0)


def test_case_4():
    str_0 = "]"
    compound_type_splitter_0 = module_0.CompoundTypeSplitter(str_0, str_0)
    assert (
        f"{type(compound_type_splitter_0).__module__}.{type(compound_type_splitter_0).__qualname__}"
        == "compoundtypesplitter.CompoundTypeSplitter"
    )
    assert compound_type_splitter_0.compound_type_annotation == "]"
    assert module_0.SPLITTING_CHARACTERS == ("[", "]", ",")
    tuple_0 = compound_type_splitter_0.get_parts()
    none_type_0 = None
    str_1 = "A)Dssc)Qf]P24b("
    str_2 = module_0.remove_forward_references(str_1, none_type_0)
    with pytest.raises(ValueError):
        module_0.CompoundTypeSplitter(none_type_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "r"
    compound_type_splitter_0 = module_0.CompoundTypeSplitter(str_0, str_0)
    assert (
        f"{type(compound_type_splitter_0).__module__}.{type(compound_type_splitter_0).__qualname__}"
        == "compoundtypesplitter.CompoundTypeSplitter"
    )
    assert compound_type_splitter_0.compound_type_annotation == "r"
    assert module_0.SPLITTING_CHARACTERS == ("[", "]", ",")
    compound_type_splitter_1 = module_0.CompoundTypeSplitter(
        str_0, compound_type_splitter_0
    )
    module_0.CompoundTypeSplitter(compound_type_splitter_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    float_0 = 1655.4
    module_0.remove_forward_references(float_0, none_type_0)


def test_case_7():
    str_0 = "uYy=e\r"
    with pytest.raises(ValueError):
        module_0.CompoundTypeSplitter(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.remove_forward_references(set_0, none_type_0)
