# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import moduleresolver as module_0
import builtins as module_1
import inspect as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.search_in_module(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.NamespacedType()


@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.NamespacedType()


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_resolver_0 = module_0.ModuleResolver(none_type_0)
    module_resolver_1 = module_0.ModuleResolver(none_type_0)
    module_resolver_2 = module_0.ModuleResolver(module_resolver_1)
    module_resolver_3 = module_0.ModuleResolver(module_resolver_1)
    dict_0 = {}
    module_resolver_4 = module_0.ModuleResolver(dict_0)
    namespaced_type_0 = module_resolver_2.resolve_full_namespace_type(none_type_0)
    assert (
        f"{type(namespaced_type_0).__module__}.{type(namespaced_type_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(namespaced_type_0) == 2
    module_resolver_5 = module_0.ModuleResolver(module_resolver_1)
    str_0 = '~}[}3\x0cMZ4"n:\t_%S?l'
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.search_in_module(list_0, namespaced_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(var_0) == 2
    str_1 = "J[!kiB%X2`~&|H"
    namespaced_type_1 = module_resolver_3.resolve_full_namespace_type(str_1)
    assert (
        f"{type(namespaced_type_1).__module__}.{type(namespaced_type_1).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(namespaced_type_1) == 2
    module_resolver_2.resolve_full_namespace_type(module_resolver_5)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "aD"
    str_1 = "GS(Y!#8eRJ]6~T9;hOF"
    var_0 = module_0.search_in_module_or_builtins(str_0, str_1)
    str_2 = "rx4H>"
    set_0 = {str_2, str_2}
    none_type_0 = None
    module_0.search_in_module_or_builtins(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    module_0.NamespacedType()


@pytest.mark.xfail(strict=True)
def test_case_6():
    object_0 = module_1.object()
    module_0.NamespacedType()


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"Q\xf3y\x0c.1%w\x81t\xdf\x84\x07"
    module_0.search_in_module(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "!64?#ku4=}!Z"
    none_type_0 = None
    var_0 = module_2.isclass(none_type_0)
    var_0.resolve_full_namespace_type(str_0)
