# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import py2puml.inspection.inspectclass as module_0
import py2puml.inspection.inspectnamedtuple as module_1
import collections.abc as module_2
import inspect as module_3
import inspectmodule as module_4
import builtins as module_5
import py2puml.domain.umlitem as module_6
import py2puml.inspection.inspectenum as module_7


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    str_0 = "]"
    str_1 = "84y\\Zj\\[_0\rp123\x0c"
    none_type_0 = None
    module_0.inspect_class_type(set_0, str_0, str_1, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.inspect_namedtuple_type(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    type_0 = module_2.Iterable
    str_0 = "1+nP\x0b\x0cQ+`*%GLp"
    none_type_0 = None
    var_0 = module_3.isclass(none_type_0)
    dict_0 = {str_0: var_0, var_0: var_0, str_0: var_0}
    module_4.inspect_domain_definition(type_0, type_0, dict_0, type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    type_0 = module_5.set
    str_0 = ""
    none_type_0 = None
    module_0.inspect_dataclass_type(type_0, type_0, str_0, type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "%V*8\x0bpK7*"
    none_type_0 = None
    iterable_0 = module_4.filter_domain_definitions(str_0, none_type_0)
    none_type_1 = None
    uml_item_0 = module_6.UmlItem(str_0, none_type_1)
    var_0 = uml_item_0.__repr__()
    var_1 = uml_item_0.__repr__()
    var_2 = module_3.isclass(var_0)
    str_1 = "\rk\x0bEk"
    iterable_1 = module_4.filter_domain_definitions(var_2, str_1)
    var_3 = uml_item_0.__eq__(var_0)
    var_4 = var_3.__repr__()
    module_4.inspect_domain_definition(var_2, none_type_1, var_2, var_0)


def test_case_5():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -175.7147
    str_0 = "v"
    iterable_0 = module_4.filter_domain_definitions(float_0, str_0)
    str_1 = "cryag|s!\t6<\n_k52s"
    type_0 = module_5.list
    uml_item_0 = module_6.UmlItem(str_0, iterable_0)
    assert (
        f"{type(uml_item_0.fqn).__module__}.{type(uml_item_0.fqn).__qualname__}"
        == "builtins.generator"
    )
    str_2 = ";"
    str_3 = "K]1!dD:BH!Zc?y'X4"
    dict_0 = {str_0: uml_item_0, str_2: uml_item_0, str_3: uml_item_0}
    module_7.inspect_enum_type(type_0, str_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    type_0 = module_5.complex
    str_0 = "__flags__"
    type_1 = module_5.object
    str_1 = "F"
    var_0 = module_3.isclass(type_1)
    var_1 = var_0.__repr__()
    str_2 = ";,OIcB<JrS\rijn"
    dict_0 = {str_1: var_1, str_2: var_1, var_0: var_0}
    list_0 = [var_1, var_0, var_1, var_0]
    var_2 = module_0.inspect_dataclass_type(type_1, str_0, str_0, dict_0, list_0)
    dict_1 = {str_0: var_2}
    module_1.inspect_namedtuple_type(type_0, str_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 1
    iterable_0 = module_4.filter_domain_definitions(int_0, int_0)
    type_0 = module_5.str
    dict_0 = {type_0: type_0, type_0: type_0, type_0: type_0}
    iterable_1 = module_4.filter_domain_definitions(dict_0, type_0)
    str_0 = ""
    module_4.inspect_module(type_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    var_0 = module_3.isclass(none_type_0)
    var_1 = var_0.__eq__(list_0)
    list_1 = [list_0, var_1, var_1, var_1]
    iterable_0 = module_4.filter_domain_definitions(list_1, bool_0)
    str_0 = "*nQ!G{g9RCu>G>K"
    var_2 = module_4.inspect_module(bool_0, str_0, var_1, var_0)
    module_4.inspect_domain_definition(none_type_0, var_0, bool_0, var_0)
