# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import py2puml.domain.umlitem as module_0
import namespace as module_1
import py2puml.domain.package as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "hL*+;@E"
    str_1 = "w{7cG"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    list_0 = [uml_item_0, uml_item_0]
    package_0 = module_1.build_packages_structure(list_0)
    assert (
        f"{type(package_0).__module__}.{type(package_0).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_0.name is None
    assert package_0.children == []
    assert package_0.items_number == 2
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    str_2 = ""
    none_type_0 = None
    package_1 = module_2.Package(str_2, none_type_0)
    iterable_0 = module_1.puml_namespace_content(none_type_0)
    str_3 = "C"
    list_1 = [str_2, str_3]
    module_1.get_or_create_module_package(package_1, list_1)


def test_case_1():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -1963.422
    iterable_0 = module_1.visit_package(float_0, float_0, float_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    module_1.build_packages_structure(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    str_0 = ".__init__"
    uml_item_0 = module_0.UmlItem(bool_0, str_0)
    list_0 = [uml_item_0]
    iterable_0 = module_1.puml_namespace_content(list_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    module_1.build_packages_structure(iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    str_0 = "MP3JW^b\r)!_"
    uml_item_0 = module_0.UmlItem(str_0, none_type_0)
    var_0 = uml_item_0.__repr__()
    module_1.get_or_create_module_package(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    int_0 = 317
    iterable_0 = module_1.visit_package(none_type_0, none_type_0, int_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    str_0 = "PsG\\]aM38=4ko-,\x0cWh"
    package_0 = module_2.Package(str_0)
    var_0 = package_0.__eq__(none_type_0)
    var_1 = var_0.__repr__()
    var_2 = var_0.__eq__(none_type_0)
    var_3 = var_1.__eq__(none_type_0)
    var_4 = var_3.__eq__(var_3)
    iterable_1 = module_1.visit_package(var_2, var_2, var_0)
    list_0 = []
    package_1 = module_1.get_or_create_module_package(list_0, list_0)
    package_2 = module_1.build_packages_structure(package_1)
    var_5 = var_1.__repr__()
    package_3 = module_1.get_or_create_module_package(package_1, list_0)
    list_1 = [var_3]
    iterable_2 = module_1.puml_namespace_content(list_1)
    iterable_3 = module_1.visit_package(package_2, package_2, none_type_0)
    iterable_4 = module_1.puml_namespace_content(none_type_0)
    var_6 = package_1.__repr__()
    package_4 = module_1.get_or_create_module_package(var_6, list_0)
    package_5 = module_1.get_or_create_module_package(none_type_0, list_0)
    var_7 = package_5.__eq__(package_5)
    var_8 = package_4.__eq__(none_type_0)
    int_1 = 0
    var_9 = package_2.__repr__()
    module_1.build_packages_structure(int_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\r.ttbSgrqn"
    module_1.get_or_create_module_package(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "nydd'"
    none_type_0 = None
    module_1.get_or_create_module_package(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xeb\x84J\x81Y\x17E/\xa6"
    module_1.get_or_create_module_package(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    iterable_0 = module_1.puml_namespace_content(list_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    list_1 = []
    iterable_1 = module_1.puml_namespace_content(list_1)
    var_0 = list_1.__eq__(iterable_0)
    iterable_2 = module_1.puml_namespace_content(list_0)
    module_1.build_packages_structure(var_0)
