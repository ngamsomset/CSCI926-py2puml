# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import dataclasses as module_0
import umlitem as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.dataclass(repr=bool_0, frozen=bool_0, kw_only=bool_0)
    uml_item_0 = module_1.UmlItem(var_0, var_0)
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_1.__eq__(var_1)
    uml_item_1 = module_1.UmlItem(var_3, var_0)
    var_4 = var_3.__repr__()
    var_5 = var_0.__repr__()
    var_6 = var_5.__eq__(bool_0)
    var_7 = var_5.__eq__(var_5)
    var_8 = var_5.__eq__(var_6)
    var_9 = uml_item_1.__repr__()
    var_10 = var_1.__repr__()
    str_0 = "C!"
    var_11 = var_10.__repr__()
    var_12 = var_5.__repr__()
    uml_item_2 = module_1.UmlItem(bool_0, str_0)
    var_13 = uml_item_2.__eq__(uml_item_2)
    var_14 = var_5.__eq__(var_10)
    var_15 = uml_item_2.__repr__()
    var_16 = var_15.__repr__()
    str_1 = "h\tZ{`T"
    uml_item_3 = module_1.UmlItem(var_3, str_1)


def test_case_1():
    none_type_0 = None
    str_0 = "aeOAD7n/"
    uml_item_0 = module_1.UmlItem(none_type_0, str_0)
    var_0 = module_0.dataclass(match_args=none_type_0, slots=none_type_0)
    str_1 = "\n        Assigns a value to a subscript of an existing variable: must be skipped\n        "
    uml_item_1 = module_1.UmlItem(none_type_0, str_1)
    uml_item_2 = module_1.UmlItem(var_0, var_0)
    bool_0 = True
    str_2 = '?\x0c3Q+A"r'
    uml_item_3 = module_1.UmlItem(bool_0, str_2)
    none_type_1 = None
    float_0 = -1064.68
    bool_1 = True
    str_3 = "__main__"
    uml_item_4 = module_1.UmlItem(str_3, str_3)
    var_1 = uml_item_3.__repr__()
    var_2 = uml_item_2.__repr__()
    str_4 = "V-\\\x0b%>{,5!#"
    str_5 = "@FJBM7"
    var_3 = uml_item_4.__repr__()
    uml_item_5 = module_1.UmlItem(str_4, str_5)
    var_4 = var_0.__eq__(uml_item_4)
    var_5 = uml_item_5.__eq__(uml_item_4)
    var_6 = var_5.__eq__(bool_1)
    var_7 = module_0.dataclass(repr=var_6)
    var_8 = var_7.__eq__(float_0)
    var_9 = var_8.__eq__(none_type_1)
    var_10 = var_9.__eq__(uml_item_3)


def test_case_2():
    bool_0 = True
    module_0.dataclass(bool_0, order=bool_0, frozen=bool_0)


def test_case_3():
    int_0 = 737
    dict_0 = {}
    int_1 = 2467
    str_0 = "\n    Collects the variables and their type annotations from the signature of a constructor method\n    "
    uml_item_0 = module_1.UmlItem(str_0, str_0)
    var_0 = uml_item_0.__eq__(str_0)
    var_1 = uml_item_0.__eq__(int_1)
    var_2 = var_1.__repr__()
    uml_item_1 = module_1.UmlItem(var_2, var_1)
    var_3 = var_2.__eq__(dict_0)
    var_4 = var_3.__eq__(int_0)
    str_1 = ""
    uml_item_2 = module_1.UmlItem(str_1, str_1)
    bool_0 = False
    var_5 = uml_item_2.__repr__()
    var_6 = uml_item_2.__eq__(str_1)
    var_7 = uml_item_2.__eq__(bool_0)
    var_8 = uml_item_2.__repr__()
    var_9 = uml_item_2.__repr__()
    var_10 = var_9.__repr__()
    var_11 = var_5.__repr__()
    var_12 = var_9.__repr__()
    bool_1 = False
    var_13 = uml_item_2.__eq__(bool_1)
