# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import ast as module_0
import py2puml.domain.umlrelation as module_1
import astvisitors as module_2
import py2puml.parsing.compoundtypesplitter as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "8EklJ'fj90@Z,"
    var_0 = module_0.get_source_segment(str_0, str_0)
    var_0.visit_Attribute(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    rel_type_0 = module_1.RelType.COMPOSITION
    rel_type_0.visit_AnnAssign(none_type_0)


def test_case_2():
    str_0 = ""
    assigned_variables_collector_0 = module_2.AssignedVariablesCollector(str_0, str_0)
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id == ""
    assert assigned_variables_collector_0.annotation == ""
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    list_0 = [assigned_variables_collector_0, assigned_variables_collector_0, str_0]
    attribute_0 = module_0.Attribute(*list_0)
    var_0 = assigned_variables_collector_0.visit_Attribute(attribute_0)


def test_case_3():
    str_0 = ""
    assigned_variables_collector_0 = module_2.AssignedVariablesCollector(str_0, str_0)
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id == ""
    assert assigned_variables_collector_0.annotation == ""
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    list_0 = [assigned_variables_collector_0, assigned_variables_collector_0, str_0]
    attribute_0 = module_0.Attribute(*list_0)
    var_0 = assigned_variables_collector_0.visit_Attribute(attribute_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "s.\nAW"
    compound_type_splitter_0 = module_3.CompoundTypeSplitter(str_0, str_0)
    none_type_0 = None
    var_0 = module_0.get_source_segment(none_type_0, none_type_0)
    var_1 = var_0.__repr__()
    var_1.extend_relations(compound_type_splitter_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "|wHot"
    str_1 = "U"
    none_type_0 = None
    assigned_variables_collector_0 = module_2.AssignedVariablesCollector(
        none_type_0, str_0
    )
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id is None
    assert assigned_variables_collector_0.annotation == "|wHot"
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    var_0 = assigned_variables_collector_0.visit_Subscript(str_1)
    str_1.visit_Name(str_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    str_0 = "\n    Information of a value type:\n    - the module-prefixed type name\n    - the short type name\n    "
    list_0 = []
    str_1 = "S.2G"
    dict_0 = {str_1: str_0}
    module_2.SignatureVariablesCollector(none_type_0, *list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    function_def_0 = module_0.FunctionDef()
    name_0 = module_0.Name()
    module_2.Variable(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "ys+lSsGc-(HtsHt\\!WAZ"
    module_2.ConstructorVisitor(str_0, str_0, str_0, str_0)
