# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import moduleresolver as module_0
import inspect as module_1
from types import ModuleType

def test_case_0():
    str_0 = ""
    var_0 = module_0.search_in_module_or_builtins(str_0, str_0)


def test_case_1():
    str_0 = "id"
    var_0 = module_0.search_in_module(str_0, str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(var_0) == 2


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    module_resolver_0 = module_0.ModuleResolver(set_0)
    module_resolver_1 = module_0.ModuleResolver(module_resolver_0)
    module_resolver_1.resolve_full_namespace_type(module_resolver_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    var_1 = module_1.isclass(var_0)
    module_resolver_0 = module_0.ModuleResolver(var_1)


def test_case_4():
    set_0 = set()
    module_resolver_0 = module_0.ModuleResolver(set_0)
    str_0 = module_resolver_0.__repr__()
    assert str_0 == "ModuleResolver(set())"
    module_resolver_1 = module_0.ModuleResolver(module_resolver_0)
    namespaced_type_0 = module_resolver_1.resolve_full_namespace_type(str_0)
    assert (
        f"{type(namespaced_type_0).__module__}.{type(namespaced_type_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(namespaced_type_0) == 2


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_resolver_0 = module_0.ModuleResolver(none_type_0)
    module_resolver_0.get_module_full_name()


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    module_resolver_0 = module_0.ModuleResolver(set_0)
    str_0 = module_resolver_0.__repr__()
    assert str_0 == "ModuleResolver(set())"
    str_1 = "__doc__"
    module_resolver_1 = module_0.ModuleResolver(module_resolver_0)
    namespaced_type_0 = module_resolver_1.resolve_full_namespace_type(str_0)
    assert (
        f"{type(namespaced_type_0).__module__}.{type(namespaced_type_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(namespaced_type_0) == 2
    module_resolver_1.resolve_full_namespace_type(str_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    set_0 = set()
    module_resolver_0 = module_0.ModuleResolver(set_0)
    str_0 = module_resolver_0.__repr__()
    assert str_0 == "ModuleResolver(set())"
    none_type_0 = None
    namespaced_type_0 = module_resolver_0.resolve_full_namespace_type(none_type_0)
    assert (
        f"{type(namespaced_type_0).__module__}.{type(namespaced_type_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(namespaced_type_0) == 2
    str_1 = "ur)++`\\e_+ ZD-"
    var_0 = module_0.search_in_module(str_1, str_1)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(var_0) == 2
    module_resolver_1 = module_0.ModuleResolver(var_0)
    module_resolver_1.resolve_full_namespace_type(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    module_resolver_0 = module_0.ModuleResolver(set_0)
    str_0 = set_0.__repr__()
    str_1 = "ur)++`\\e_+ ZD-"
    module_resolver_1 = module_0.ModuleResolver(module_resolver_0)
    namespaced_type_0 = module_resolver_1.resolve_full_namespace_type(str_0)
    var_0 = module_0.search_in_module(set_0, module_resolver_1)
    list_0 = [str_1]
    bool_0 = True
    var_1 = module_0.search_in_module(list_0, bool_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(var_1) == 2
    str_2 = "L<\nH("
    namespaced_type_1 = module_resolver_1.resolve_full_namespace_type(str_2)
    assert (
        f"{type(namespaced_type_1).__module__}.{type(namespaced_type_1).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(namespaced_type_1) == 2
    var_1.resolve_full_namespace_type(str_1)

@pytest.mark.xfail
def test_case_9():
    module_resolver_0 = module_0.ModuleResolver('builtins')
    assert isinstance(module_resolver_0, module_0.ModuleResolver)

@pytest.mark.xfail(strict=True)
def test_case_10():
    with pytest.raises(Exception):  # Change the exception type to what your code actually raises
        module_0.ModuleResolver(None)

@pytest.mark.xfail(strict=True)
def test_case_11():
    result = module_0.search_in_module_or_builtins("len", "builtins")
    assert result is not None and callable(result)

@pytest.mark.xfail(strict=True)
def test_case_12():
    with pytest.raises(Exception):  # Change to the appropriate exception
        module_0.search_in_module_or_builtins("non_existent_function", "builtins")

@pytest.mark.xfail(strict=True)
def test_case_13():
    module_resolver_0 = module_0.ModuleResolver("builtins")
    result = module_resolver_0.resolve_full_namespace_type("int")
    assert result is not None and isinstance(result, type)

@pytest.mark.xfail
def test_case_14():
    module_resolver_0 = module_0.ModuleResolver("builtins")
    with pytest.raises(Exception):  # Change to the appropriate exception
        module_resolver_0.resolve_full_namespace_type("non_existent_type")

@pytest.mark.xfail(strict=True)
def test_case_15():
    module_resolver_0 = module_0.ModuleResolver("os")
    result = module_resolver_0.resolve_full_namespace_type("path.join")
    assert result is not None and callable(result)

@pytest.mark.xfail(strict=True)
def test_case_16():
    with pytest.raises(Exception):  # Change the exception type to what your code actually raises
        module_0.ModuleResolver(module_1)

@pytest.mark.xfail(strict=True)
def test_case_17():
    result = module_0.search_in_module_or_builtins("max", "builtins")
    assert result is not None and callable(result)

@pytest.mark.xfail(strict=True)
def test_case_18():
    module_resolver_0 = module_0.ModuleResolver("math")
    result = module_resolver_0.resolve_full_namespace_type("sqrt")
    assert result is not None and callable(result)

def test_case_19():
    module_0.ModuleResolver(123)

def test_case_20():
    module_0.ModuleResolver([])

def test_case_21():
    module_0.ModuleResolver({})

def test_case_22():
    module_0.ModuleResolver(set())

def test_case_23():
    module_0.search_in_module_or_builtins(None, None)

def test_case_24():
    module_0.search_in_module_or_builtins("", "")

@pytest.mark.xfail(strict=True)
def test_case_25():
    module_0.search_in_module_or_builtins(123, 123)

@pytest.mark.xfail(strict=True)
def test_case_26():
    module_0.search_in_module_or_builtins([], [])

@pytest.mark.xfail(strict=True)
def test_case_27():
    module_0.search_in_module_or_builtins({}, {})

def test_case_28():
    module_0.ModuleResolver("builtins").resolve_full_namespace_type(None)

@pytest.mark.xfail(strict=True)
def test_case_29():
    module_0.ModuleResolver("builtins").resolve_full_namespace_type("")

@pytest.mark.xfail(strict=True)
def test_case_30():
    module_0.ModuleResolver("builtins").resolve_full_namespace_type(123)

@pytest.mark.xfail(strict=True)
def test_case_31():
    module_0.ModuleResolver("builtins").resolve_full_namespace_type([])

@pytest.mark.xfail(strict=True)
def test_case_32():
    module_0.ModuleResolver("builtins").resolve_full_namespace_type({})

@pytest.mark.xfail(strict=True)
def test_case_33():
    module_0.ModuleResolver("builtins").resolve_full_namespace_type(set())

@pytest.mark.xfail(strict=True)
def test_case_34():
    module_0.ModuleResolver("builtins").resolve_full_namespace_type(lambda: None)

def test_case_35():
    module_0.ModuleResolver("os").resolve_full_namespace_type(None)

@pytest.mark.xfail(strict=True)
def test_case_36():
    module_0.ModuleResolver("os").resolve_full_namespace_type("")

@pytest.mark.xfail(strict=True)
def test_case_37():
    module_0.ModuleResolver("os").resolve_full_namespace_type(123)

@pytest.mark.xfail(strict=True)
def test_case_38():
    module_0.ModuleResolver("os").resolve_full_namespace_type([])

@pytest.mark.xfail(strict=True)
def test_case_39():
    module_0.ModuleResolver("os").resolve_full_namespace_type({})

@pytest.mark.xfail(strict=True)
def test_case_40():
    module_0.ModuleResolver("os").resolve_full_namespace_type(set())

@pytest.mark.xfail(strict=True)
def test_case_41():
    module_0.ModuleResolver("os").resolve_full_namespace_type(lambda: None)

def test_case_42():
    module_0.ModuleResolver("non_existent_module")

@pytest.mark.xfail(strict=True)
def test_case_43():
    module_0.ModuleResolver("builtins").resolve_full_namespace_type("non_existent_type")

@pytest.mark.xfail(strict=True)
def test_case_44():
    module_0.ModuleResolver("os").resolve_full_namespace_type("non_existent_type")

@pytest.mark.xfail(strict=True)
def test_case_45():
    module_0.ModuleResolver("non_existent_module").resolve_full_namespace_type("int")


def test_case_46():
    module_0.search_in_module_or_builtins("non_existent_function", "builtins")

def test_case_47():
    module_0.search_in_module_or_builtins("non_existent_function", "os")

def test_case_48():
    module_0.search_in_module_or_builtins("non_existent_function", "non_existent_module")

def test_case_49():
    module_0.search_in_module_or_builtins("int", "non_existent_module")

def test_case_50():
    with pytest.raises(TypeError):
        module_0.ModuleResolver("os").resolve_full_namespace_type(set())

def test_case_51():
    with pytest.raises(TypeError):
        module_0.ModuleResolver("os").resolve_full_namespace_type(lambda: None)
@pytest.mark.xfail(strict=True)
def test_case_52():
    with pytest.raises(ImportError):
        module_0.ModuleResolver("non_existent_module")
@pytest.mark.xfail(strict=True)
def test_case_53():
    with pytest.raises(AttributeError):
        module_0.ModuleResolver("builtins").resolve_full_namespace_type("non_existent_type")
@pytest.mark.xfail(strict=True)
def test_case_54():
    with pytest.raises(AttributeError):
        module_0.ModuleResolver("os").resolve_full_namespace_type("non_existent_type")

@pytest.mark.xfail(strict=True)
def test_case_55():
    with pytest.raises(ImportError):
        module_0.ModuleResolver("non_existent_module").resolve_full_namespace_type("int")
@pytest.mark.xfail(strict=True)
def test_case_56():
    with pytest.raises(AttributeError):
        module_0.search_in_module_or_builtins("non_existent_function", "builtins")
@pytest.mark.xfail(strict=True)
def test_case_57():
    with pytest.raises(AttributeError):
        module_0.search_in_module_or_builtins("non_existent_function", "os")
@pytest.mark.xfail(strict=True)
def test_case_58():
    with pytest.raises(ImportError):
        module_0.search_in_module_or_builtins("non_existent_function", "non_existent_module")
@pytest.mark.xfail(strict=True)
def test_case_59():
    with pytest.raises(ImportError):
        module_0.search_in_module_or_builtins("int", "non_existent_module")
@pytest.mark.xfail(strict=True)
def test_case_60():
    assert module_0.ModuleResolver("sys").resolve_full_namespace_type("str") == str
@pytest.mark.xfail(strict=True)
def test_case_61():
    assert module_0.ModuleResolver("builtins").resolve_full_namespace_type("str") == str
@pytest.mark.xfail(strict=True)
def test_case_62():
    assert module_0.ModuleResolver("typing").resolve_full_namespace_type("str") == str
@pytest.mark.xfail(strict=True)
def test_case_63():
    assert module_0.ModuleResolver("collections").resolve_full_namespace_type("str") == str
@pytest.mark.xfail(strict=True)
def test_case_64():
    assert module_0.ModuleResolver("os").resolve_full_namespace_type("str") == str
@pytest.mark.xfail(strict=True)
def test_case_65():
    assert module_0.ModuleResolver("sys").resolve_full_namespace_type("int") == int
@pytest.mark.xfail(strict=True)
def test_case_66():
    assert module_0.ModuleResolver("builtins").resolve_full_namespace_type("int") == int
@pytest.mark.xfail(strict=True)
def test_case_67():
    assert module_0.ModuleResolver("typing").resolve_full_namespace_type("int") == int
@pytest.mark.xfail(strict=True)
def test_case_68():
    assert module_0.ModuleResolver("collections").resolve_full_namespace_type("int") == int
@pytest.mark.xfail(strict=True)
def test_case_69():
    assert module_0.ModuleResolver("os").resolve_full_namespace_type("int") == int
@pytest.mark.xfail(strict=True)
def test_case_70():
    assert module_0.search_in_module_or_builtins("str", "builtins") == str
@pytest.mark.xfail(strict=True)
def test_case_71():
    assert module_0.search_in_module_or_builtins("str", "os") == str
@pytest.mark.xfail(strict=True)
def test_case_72():
    assert module_0.search_in_module_or_builtins("str", "sys") == str
@pytest.mark.xfail(strict=True)
def test_case_73():
    assert module_0.search_in_module_or_builtins("str", "typing") == str
@pytest.mark.xfail(strict=True)
def test_case_74():
    assert module_0.search_in_module_or_builtins("str", "collections") == str



