# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import py2puml.domain.umlrelation as module_0
import parseclassconstructor as module_1
import builtins as module_2
import ast as module_3
import textwrap as module_4
import py2puml.parsing.astvisitors as module_5
import py2puml.parsing.moduleresolver as module_6


@pytest.mark.xfail(strict=True)
def test_case_0():
    type_0 = module_0.UmlRelation
    str_0 = ';Ax"))'
    module_1.parse_class_constructor(type_0, type_0, str_0)


def test_case_1():
    type_0 = module_2.tuple
    str_0 = "YL"
    type_1 = module_3.NodeVisitor
    str_1 = "D2pJHg'\x0chn"
    tuple_0 = module_1.parse_class_constructor(type_1, str_0, str_1)
    none_type_0 = None
    tuple_1 = module_1.parse_class_constructor(type_1, tuple_0, type_1)
    tuple_2 = module_1.parse_class_constructor(str_0, none_type_0, str_0)
    tuple_3 = module_1.parse_class_constructor(type_0, type_0, str_0)
    none_type_1 = None
    tuple_4 = module_1.parse_class_constructor(type_0, none_type_1, str_0)


def test_case_2():
    type_0 = module_2.tuple
    str_0 = "\tw{K;7"
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, str_0)
    none_type_0 = None
    str_1 = "a_k)<_qlyaxblt"
    str_2 = "aAedetDbN:$"
    tuple_1 = module_1.parse_class_constructor(none_type_0, str_1, str_2)
    tuple_2 = module_1.parse_class_constructor(type_0, type_0, none_type_0)
    str_3 = "Ncr%5|?v"
    tuple_3 = module_1.parse_class_constructor(none_type_0, str_0, str_3)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_4.dedent(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_3.parse(none_type_0, mode=none_type_0)


def test_case_5():
    complex_0 = -358.737104 - 510j
    str_0 = "=Z5xM,"
    tuple_0 = module_1.parse_class_constructor(complex_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = " uW &g7"
    str_1 = ">\x0cwX[A9S18"
    bool_0 = False
    str_2 = "U!\x0c9$1~I(\\` l"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: bool_0, str_2: bool_0}
    module_3.NodeVisitor(**dict_0)


def test_case_7():
    type_0 = module_3.expr
    str_0 = "dU{NDFygen@B<?"
    tuple_0 = module_1.parse_class_constructor(type_0, str_0, str_0)
    type_1 = module_2.int
    str_1 = "cW"
    tuple_1 = module_1.parse_class_constructor(type_1, type_1, str_1)
    type_2 = module_3.Assign
    none_type_0 = None
    tuple_2 = module_1.parse_class_constructor(type_2, str_0, none_type_0)
    str_2 = "b0%W$Plg>rfS_6TRE{pE"
    tuple_3 = module_1.parse_class_constructor(type_1, str_2, str_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    str_0 = 'p"bl<'
    tuple_0 = module_1.parse_class_constructor(none_type_0, str_0, str_0)
    type_0 = module_2.bool
    str_1 = "pp]"
    tuple_1 = module_1.parse_class_constructor(str_1, type_0, type_0)
    str_2 = "\x0b{g;>%_Cw]p\x0c}rmeS"
    tuple_2 = module_1.parse_class_constructor(type_0, str_2, none_type_0)
    type_1 = module_5.Variable
    str_3 = ""
    tuple_3 = module_1.parse_class_constructor(type_0, str_3, tuple_1)
    tuple_4 = module_1.parse_class_constructor(type_1, str_1, type_1)
    type_2 = module_2.bytes
    tuple_5 = module_1.parse_class_constructor(type_2, type_2, str_1)
    tuple_6 = module_1.parse_class_constructor(type_0, type_0, str_1)
    type_3 = module_6.ModuleResolver
    module_1.parse_class_constructor(type_3, str_1, type_0)


def test_case_9():
    str_0 = "test_string"
    tuple_0 = module_1.parse_class_constructor(str_0, str_0, str_0)


def test_case_10():
    type_0 = int
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_11():
    none_type_0 = None
    tuple_0 = module_1.parse_class_constructor(none_type_0, none_type_0, none_type_0)


def test_case_12():
    type_0 = float
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_13():
    type_0 = dict
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_14():
    type_0 = list
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_15():
    type_0 = set
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_16():
    type_0 = tuple
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)

def test_case_17():
    type_0 = complex
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_18():
    type_0 = bool
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_19():
    str_0 = "another_test_string"
    tuple_0 = module_1.parse_class_constructor(str_0, str_0, str_0)


def test_case_20():
    type_0 = int
    str_0 = "builtins.int"
    str_1 = "builtins"
    tuple_0 = module_1.parse_class_constructor(type_0, str_0, str_1)


def test_case_21():
    type_0 = list.__class__
    str_0 = "builtins.type"
    str_1 = "builtins"
    tuple_0 = module_1.parse_class_constructor(type_0, str_0, str_1)


def test_case_22():
    type_0 = str.__class__
    str_0 = "builtins.type"
    str_1 = "builtins"
    tuple_0 = module_1.parse_class_constructor(type_0, str_0, str_1)



def test_case_23():
    type_0 = module_3.AST
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_24():
    type_0 = module_3.NodeVisitor
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_25():
    type_0 = module_3.expr
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_26():
    type_0 = module_2.type
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_27():
    type_0 = module_2.str
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_28():
    type_0 = module_2.int
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_29():
    type_0 = module_2.float
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_30():
    type_0 = module_2.complex
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_31():
    type_0 = module_2.bool
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_32():
    type_0 = module_2.dict
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_33():
    type_0 = module_2.list
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_34():
    type_0 = module_2.set
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_35():
    type_0 = module_2.tuple
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_36():
    type_0 = module_2.frozenset
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_37():
    type_0 = module_2.object
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_38():
    type_0 = module_3.stmt
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_39():
    type_0 = module_3.expr_context
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_40():
    type_0 = module_3.slice
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_41():
    type_0 = module_3.boolop
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_42():
    type_0 = module_3.unaryop
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_43():
    type_0 = module_3.cmpop
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_44():
    type_0 = module_3.comprehension
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_45():
    type_0 = module_3.excepthandler
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_46():
    type_0 = module_3.arguments
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_47():
    type_0 = module_3.arg
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_48():
    type_0 = module_3.keyword
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_49():
    type_0 = module_3.alias
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)


def test_case_50():
    type_0 = module_3.withitem
    tuple_0 = module_1.parse_class_constructor(type_0, type_0, type_0)
