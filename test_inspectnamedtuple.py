# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import inspectnamedtuple as module_0
import builtins as module_1
import py2puml.domain.umlclass as module_2
import py2puml.domain.umlitem as module_3
import collections as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    dict_0 = {}
    module_0.inspect_namedtuple_type(bool_0, set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    type_0 = module_1.str
    str_0 = "#!_6OrC%Ng"
    str_1 = "st>J2HmjBMG"
    none_type_0 = None
    bool_0 = False
    uml_class_0 = module_2.UmlClass(str_1, str_0, none_type_0, bool_0)
    dict_0 = {str_0: uml_class_0}
    module_0.inspect_namedtuple_type(type_0, str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 4388
    str_0 = "NMD)TUCu=?j=dp+"
    module_0.inspect_namedtuple_type(int_0, str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    str_0 = ","
    uml_item_0 = module_3.UmlItem(str_0, str_0)
    var_0 = uml_item_0.__eq__(bool_0)
    bool_1 = False
    int_0 = -428
    bool_2 = False
    str_1 = "ewEzxX\n(MC"
    str_2 = "Gs\\&R,"
    float_0 = 3099.456
    uml_attribute_0 = module_2.UmlAttribute(str_1, str_2, float_0)
    var_1 = uml_attribute_0.__eq__(bool_2)
    var_2 = var_1.__eq__(int_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__eq__(bool_1)
    var_5 = var_4.__repr__()
    var_6 = var_5.__eq__(var_0)
    var_7 = var_6.__repr__()
    dict_0 = {var_7: uml_item_0}
    module_0.inspect_namedtuple_type(dict_0, var_7, var_6)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "E*(U(+O#\x0cpRrKKNI;"
    list_0 = []
    uml_class_0 = module_2.UmlClass(str_0, str_0, list_0)
    var_0 = uml_class_0.__repr__()
    list_1 = [var_0]
    uml_class_1 = module_2.UmlClass(str_0, str_0, list_1, var_0)
    type_0 = module_1.type
    dict_0 = {}
    module_0.inspect_namedtuple_type(type_0, type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    type_0 = module_1.complex
    int_0 = -3650
    none_type_0 = None
    module_0.inspect_namedtuple_type(type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    type_0 = module_1.tuple
    dict_0 = {}
    module_0.inspect_namedtuple_type(type_0, type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ",#"
    type_0 = module_1.list
    str_1 = "Dg8\nU$+f}Y~"
    float_0 = 1087.598695
    none_type_0 = None
    uml_class_0 = module_2.UmlClass(float_0, float_0, str_1, none_type_0)
    var_0 = uml_class_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    str_2 = "G{Di#QyB=4R.]n"
    str_3 = "HeA"
    dict_0 = {str_0: var_2, str_2: var_2, str_3: uml_class_0, var_2: var_2}
    module_0.inspect_namedtuple_type(type_0, str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.inspect_namedtuple_type(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 0
    type_0 = module_1.set
    none_type_0 = None
    str_0 = "5H8k8;X,02\x0bV"
    uml_class_0 = module_2.UmlClass(none_type_0, str_0, int_0)
    var_0 = uml_class_0.__eq__(int_0)
    var_1 = var_0.__repr__()
    var_2 = var_1.__eq__(str_0)
    var_3 = var_2.__eq__(type_0)
    str_1 = "K4N@A/3[FHPQga3HH{'"
    dict_0 = {str_0: var_3, str_0: var_2, var_3: uml_class_0, str_1: var_2}
    module_0.inspect_namedtuple_type(type_0, none_type_0, dict_0)

def test_case_10():
    tuple_0 = module_4.namedtuple('Abc', ['a', 'b'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Abc", dict_0)

def test_case_11():
    tuple_0 = module_4.namedtuple('Xyz', ['x', 'y'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Xyz", dict_0)

def test_case_12():
    tuple_0 = module_4.namedtuple('Def', ['d', 'e'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Def", dict_0)

def test_case_13():
    tuple_0 = module_4.namedtuple('Klm', ['k', 'l'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Klm", dict_0)

def test_case_14():
    tuple_0 = module_4.namedtuple('Pqr', ['p', 'q'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Pqr", dict_0)

def test_case_15():
    tuple_0 = module_4.namedtuple('Stu', ['s', 't'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Stu", dict_0)

def test_case_16():
    tuple_0 = module_4.namedtuple('Vwx', ['v', 'w'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Vwx", dict_0)

def test_case_17():
    tuple_0 = module_4.namedtuple('Yza', ['y', 'z'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Yza", dict_0)

def test_case_18():
    tuple_0 = module_4.namedtuple('Bcd', ['b', 'c', 'd'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Bcd", dict_0)

def test_case_19():
    tuple_0 = module_4.namedtuple('Efg', ['e', 'f', 'g'])
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_0, "module_4.Efg", dict_0)
@pytest.mark.xfail(strict=True)
def test_case_20():
    tuple_0 = module_4.namedtuple('Hij', ['h', 'i', 'j'])
    tuple_1 = tuple_0("1", "2", "3")
    dict_0 = {}
    module_0.inspect_namedtuple_type(tuple_1, 'Hij', dict_0)
@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "#!_6OrC%Ng"
    str_1 = "st>J2HmjBMG"
    bool_0 = False
    uml_class_0 = module_2.UmlClass(str_1, str_0, bool_0)
    dict_0 = {str_0: uml_class_0}
    tuple_0 = module_4.namedtuple('Klm', ['k', 'l', 'm'])
    tuple_1 = tuple_0("4", "5", "6")
    module_0.inspect_namedtuple_type(tuple_1, 'Klm', dict_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = 4388
    str_0 = "NMD)TUCu=?j=dp+"
    tuple_0 = module_4.namedtuple('Nop', ['n', 'o', 'p'])
    tuple_1 = tuple_0("7", "8", "9")
    module_0.inspect_namedtuple_type(tuple_1, str_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    str_0 = ","
    uml_item_0 = module_3.UmlItem(str_0, str_0)
    var_0 = uml_item_0.__eq__(bool_0)
    bool_1 = False
    int_0 = -428
    bool_2 = False
    str_1 = "ewEzxX\n(MC"
    str_2 = "Gs\\&R,"
    float_0 = 3099.456
    uml_attribute_0 = module_2.UmlAttribute(str_1, str_2, float_0)
    var_1 = uml_attribute_0.__eq__(bool_2)
    var_2 = var_1.__eq__(int_0)
    var_3 = var_2.__repr__()
    var_4 = var_3.__eq__(bool_1)
    var_5 = var_4.__repr__()
    var_6 = var_5.__eq__(var_0)
    var_7 = var_6.__repr__()
    dict_0 = {var_7: uml_item_0}
    tuple_0 = module_4.namedtuple('Qrs', ['q', 'r', 's'])
    tuple_1 = tuple_0("10", "11", "12")
    module_0.inspect_namedtuple_type(tuple_1, var_7, var_6)
@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "E*(U(+O#\x0cpRrKKNI;"
    list_0 = []
    uml_class_0 = module_2.UmlClass(str_0, str_0, list_0)
    var_0 = uml_class_0.__repr__()
    list_1 = [var_0]
    uml_class_1 = module_2.UmlClass(str_0, str_0, list_1, var_0)
    type_0 = module_1.type
    dict_0 = {}
    tuple_0 = module_4.namedtuple('Tuv', ['t', 'u', 'v'])
    tuple_1 = tuple_0("13", "14", "15")
    module_0.inspect_namedtuple_type(tuple_1, type_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    type_0 = module_1.complex
    int_0 = -3650
    none_type_0 = None
    tuple_0 = module_4.namedtuple('Wxy', ['w', 'x', 'y'])
    tuple_1 = tuple_0("16", "17", "18")
    module_0.inspect_namedtuple_type(tuple_1, type_0, none_type_0)
@pytest.mark.xfail(strict=True)
def test_case_26():
    type_0 = module_1.tuple
    dict_0 = {}
    tuple_0 = module_4.namedtuple('Zab', ['z', 'a', 'b'])
    tuple_1 = tuple_0("19", "20", "21")
    module_0.inspect_namedtuple_type(tuple_1, type_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = ",#"
    type_0 = module_1.list
    str_1 = "Dg8\nU$+f}Y~"
    float_0 = 1087.598695
    none_type_0 = None
    uml_class_0 = module_2.UmlClass(float_0, float_0, str_1, none_type_0)
    var_0 = uml_class_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    str_2 = "G{Di#QyB=4R.]n"
    str_3 = "HeA"
    dict_0 = {str_0: var_2, str_2: var_2, str_3: uml_class_0, var_2: var_2}
    tuple_0 = module_4.namedtuple('Cde', ['c', 'd', 'e'])
    tuple_1 = tuple_0("22", "23", "24")
    module_0.inspect_namedtuple_type(tuple_1, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    tuple_0 = module_4.namedtuple('Fgh', ['f', 'g', 'h'])
    tuple_1 = tuple_0("25", "26", "27")
    module_0.inspect_namedtuple_type(tuple_1, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = 0
    type_0 = module_1.set
    none_type_0 = None
    str_0 = "5H8k8;X,02\x0bV"
    uml_class_0 = module_2.UmlClass(none_type_0, str_0, int_0)
    var_0 = uml_class_0.__eq__(int_0)
    var_1 = var_0.__repr__()
    var_2 = var_1.__eq__(str_0)
    var_3 = var_2.__eq__(type_0)
    str_1 = "K4N@A/3[FHPQga3HH{'"
    dict_0 = {str_1: uml_class_0}
    tuple_0 = module_4.namedtuple('Ijk', ['i', 'j', 'k'])
    tuple_1 = tuple_0("28", "29", "30")
    module_0.inspect_namedtuple_type(tuple_1, str_1, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_30():
    float_0 = -1861.618
    tuple_0 = module_4.namedtuple('Lmn', ['l', 'm', 'n'])
    tuple_1 = tuple_0("31", "32", "33")
    module_0.inspect_namedtuple_type(tuple_1, float_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "L"
    type_0 = module_1.int
    tuple_0 = module_4.namedtuple('Opq', ['o', 'p', 'q'])
    tuple_1 = tuple_0("34", "35", "36")
    module_0.inspect_namedtuple_type(tuple_1, str_0, type_0)
@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = 5518
    tuple_0 = module_4.namedtuple('Rst', ['r', 's', 't'])
    tuple_1 = tuple_0("37", "38", "39")
    module_0.inspect_namedtuple_type(tuple_1, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "VW"
    int_0 = -1774
    str_1 = "@-"
    bool_0 = False
    bool_1 = False
    tuple_0 = module_4.namedtuple('Uvw', ['u', 'v', 'w'])
    tuple_1 = tuple_0("40", "41", "42")
    module_0.inspect_namedtuple_type(tuple_1, bool_0, bool_1)
@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = True
    tuple_0 = module_4.namedtuple('Xyz', ['x', 'y', 'z'])
    tuple_1 = tuple_0("43", "44", "45")
    module_0.inspect_namedtuple_type(tuple_1, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    type_0 = module_1.str
    tuple_0 = module_4.namedtuple('Abc', ['a', 'b', 'c'])
    tuple_1 = tuple_0("46", "47", "48")
    module_0.inspect_namedtuple_type(tuple_1, type_0, type_0)
@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    tuple_0 = module_4.namedtuple('Def', ['d', 'e', 'f'])
    tuple_1 = tuple_0("49", "50", "51")
    module_0.inspect_namedtuple_type(tuple_1, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    type_0 = module_1.float
    tuple_0 = module_4.namedtuple('Ghi', ['g', 'h', 'i'])
    tuple_1 = tuple_0("52", "53", "54")
    module_0.inspect_namedtuple_type(tuple_1, type_0, type_0)
@pytest.mark.xfail(strict=True)
def test_case_38():
    bool_0 = False
    tuple_0 = module_4.namedtuple('Jkl', ['j', 'k', 'l'])
    tuple_1 = tuple_0("55", "56", "57")
    module_0.inspect_namedtuple_type(tuple_1, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "Z"
    tuple_0 = module_4.namedtuple('Mno', ['m', 'n', 'o'])
    tuple_1 = tuple_0("58", "59", "60")
    module_0.inspect_namedtuple_type(tuple_1, str_0, str_0)

import pytest
import inspectnamedtuple as module_0
import builtins as module_1
import py2puml.domain.umlclass as module_2
import py2puml.domain.umlitem as module_3
import collections as module_4

@pytest.mark.xfail(strict=True)
def test_case_40():
    tuple_0 = module_4.namedtuple('Efg', 'x y')
    instance_0 = tuple_0('random_string_21', 'random_string_22')
    str_0 = "random_string_23"
    dict_0 = {}
    module_0.inspect_namedtuple_type(instance_0, str_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    tuple_0 = module_4.namedtuple('Hij', 'x y')
    instance_0 = tuple_0('random_string_24', 'random_string_25')
    str_0 = "random_string_26"
    dict_0 = {}
    module_0.inspect_namedtuple_type(instance_0, str_0, dict_0)

def test_case_42():
    tuple_0 = module_4.namedtuple('Klm', 'x y')
    instance_0 = tuple_0('random_string_27', 'random_string_28')
    str_0 = "random_string_29"
    dict_0 = {}
    module_0.inspect_namedtuple_type(type(instance_0), str_0, dict_0)

def test_case_43():
    tuple_0 = module_4.namedtuple('Nop', 'x y')
    instance_0 = tuple_0('random_string_30', 'random_string_31')
    str_0 = "random_string_32"
    dict_0 = {}
    module_0.inspect_namedtuple_type(type(instance_0), str_0, dict_0)

def test_case_45():
    tuple_0 = module_4.namedtuple('Tuv', 'x y')
    instance_0 = tuple_0('random_string_36', 'random_string_37')
    str_0 = "random_string_38"
    dict_0 = {}
    module_0.inspect_namedtuple_type(type(instance_0), str_0, dict_0)

def test_case_46():
    tuple_0 = module_4.namedtuple('Wxy', 'x y')
    instance_0 = tuple_0('random_string_39', 'random_string_40')
    str_0 = "random_string_41"
    dict_0 = {}
    module_0.inspect_namedtuple_type(type(instance_0), str_0, dict_0)

def test_case_48():
    tuple_0 = module_4.namedtuple('Cde', 'x y')
    instance_0 = tuple_0('random_string_45', 'random_string_46')
    str_0 = "random_string_47"
    dict_0 = {}
    module_0.inspect_namedtuple_type(type(instance_0), str_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    tuple_0 = module_4.namedtuple('Fgh', 'x y')
    instance_0 = tuple_0('random_string_48', 'random_string_49')
    str_0 = "random_string_50"
    dict_0 = {}
    module_0.inspect_namedtuple_type(instance_0, str_0, dict_0)
