# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import inspectenum as module_0
import enum as module_1
import py2puml.domain.umlitem as module_2
import py2puml.domain.umlenum as module_3
import builtins as module_4
from enum import Enum


class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3
class Member(Enum):
    AAA = 1
    BBB = 2
    CCC = 3
class Shape(Enum):
    SQUARE = 1
    CIRCLE = 2
    TRIANGLE = 3

class Weekday(Enum):
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 3
    THURSDAY = 4
    FRIDAY = 5
    SATURDAY = 6
    SUNDAY = 7

class Planet(Enum):
    MERCURY = 1
    VENUS = 2
    EARTH = 3
    MARS = 4
    JUPITER = 5
    SATURN = 6
    URANUS = 7
    NEPTUNE = 8

class Month(Enum):
    JANUARY = 1
    FEBRUARY = 2
    MARCH = 3
    APRIL = 4
    MAY = 5
    JUNE = 6
    JULY = 7
    AUGUST = 8
    SEPTEMBER = 9
    OCTOBER = 10
    NOVEMBER = 11
    DECEMBER = 12
def test_case_0():
    enum_0 = Color
    enum_type_fqn = 'test_inspectenum.Color'
    domain_items_by_fqn = {}

    module_0.inspect_enum_type(enum_0, enum_type_fqn, domain_items_by_fqn)

    assert enum_type_fqn in domain_items_by_fqn
    assert domain_items_by_fqn[enum_type_fqn].name == 'Color'
    assert domain_items_by_fqn[enum_type_fqn].fqn == enum_type_fqn
    assert domain_items_by_fqn[enum_type_fqn].members == [
        module_0.Member(name='RED', value=1),
        module_0.Member(name='GREEN', value=2),
        module_0.Member(name='BLUE', value=3),
    ]

def test_case_2():
    enum_0 = Weekday
    enum_type_fqn = 'test_inspectenum.Weekday'
    domain_items_by_fqn = {}

    module_0.inspect_enum_type(enum_0, enum_type_fqn, domain_items_by_fqn)

    assert enum_type_fqn in domain_items_by_fqn
    assert domain_items_by_fqn[enum_type_fqn].name == 'Weekday'
    assert domain_items_by_fqn[enum_type_fqn].fqn == enum_type_fqn
    assert domain_items_by_fqn[enum_type_fqn].members == [
        module_0.Member(name='MONDAY', value=1),
        module_0.Member(name='TUESDAY', value=2),
        module_0.Member(name='WEDNESDAY', value=3),
        module_0.Member(name='THURSDAY', value=4),
        module_0.Member(name='FRIDAY', value=5),
        module_0.Member(name='SATURDAY', value=6),
        module_0.Member(name='SUNDAY', value=7),
    ]

def test_case_3():
    enum_0 = Planet
    enum_type_fqn = 'test_inspectenum.Planet'
    domain_items_by_fqn = {}

    module_0.inspect_enum_type(enum_0, enum_type_fqn, domain_items_by_fqn)

    assert enum_type_fqn in domain_items_by_fqn
    assert domain_items_by_fqn[enum_type_fqn].name == 'Planet'
    assert domain_items_by_fqn[enum_type_fqn].fqn == enum_type_fqn
    assert domain_items_by_fqn[enum_type_fqn].members == [
        module_0.Member(name='MERCURY', value=1),
        module_0.Member(name='VENUS', value=2),
        module_0.Member(name='EARTH', value=3),
        module_0.Member(name='MARS', value=4),
        module_0.Member(name='JUPITER', value=5),
        module_0.Member(name='SATURN', value=6),
        module_0.Member(name='URANUS', value=7),
        module_0.Member(name='NEPTUNE', value=8),
    ]

def test_case_4():
    enum_0 = Month
    enum_type_fqn = 'test_inspectenum.Month'
    domain_items_by_fqn = {}

    module_0.inspect_enum_type(enum_0, enum_type_fqn, domain_items_by_fqn)

    assert enum_type_fqn in domain_items_by_fqn
    assert domain_items_by_fqn[enum_type_fqn].name == 'Month'
    assert domain_items_by_fqn[enum_type_fqn].fqn == enum_type_fqn
    assert domain_items_by_fqn[enum_type_fqn].members == [
        module_0.Member(name='JANUARY', value=1),
        module_0.Member(name='FEBRUARY', value=2),
        module_0.Member(name='MARCH', value=3),
        module_0.Member(name='APRIL', value=4),
        module_0.Member(name='MAY', value=5),
        module_0.Member(name='JUNE', value=6),
        module_0.Member(name='JULY', value=7),
        module_0.Member(name='AUGUST', value=8),
        module_0.Member(name='SEPTEMBER', value=9),
        module_0.Member(name='OCTOBER', value=10),
        module_0.Member(name='NOVEMBER', value=11),
        module_0.Member(name='DECEMBER', value=12),
    ]
    

def test_case_7():
    type_0 = Color
    str_0 = "Color"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)


def test_case_8():
    type_0 = Shape
    str_0 = "Shape"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "random string"
    str_1 = "another random string"
    dict_0 = {}
    module_0.inspect_enum_type(str_0, str_1, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    type_0 = module_4.float
    str_0 = "float"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_11():
    type_0 = module_3.Member
    str_0 = "Member"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)

def test_case_12():
    type_0 = module_1.Enum
    str_0 = "Enum"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_13():
    type_0 = module_4.set
    str_0 = "set"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_14():
    type_0 = module_4.bool
    str_0 = "bool"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_15():
    type_0 = module_4.complex
    str_0 = "complex"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_15():
    type_0 = module_4.int
    str_0 = "int"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_16():
    type_0 = module_4.float
    str_0 = "float"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_17():
    type_0 = module_4.bool
    str_0 = "bool"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_18():
    type_0 = module_4.complex
    str_0 = "complex"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_19():
    type_0 = module_4.list
    str_0 = "list"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_20():
    type_0 = module_4.tuple
    str_0 = "tuple"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_21():
    type_0 = module_4.set
    str_0 = "set"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_22():
    type_0 = module_4.dict
    str_0 = "dict"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_23():
    type_0 = module_4.str
    str_0 = "str"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_24():
    type_0 = module_4.range
    str_0 = "range"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)

def test_case_25():
    type_0 = module_1.Enum
    str_0 = "Enum"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_26():
    type_0 = module_4.frozenset
    str_0 = "frozenset"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_27():
    type_0 = module_4.memoryview
    str_0 = "memoryview"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_28():
    type_0 = module_4.property
    str_0 = "property"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_29():
    type_0 = module_4.slice
    str_0 = "slice"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_30():
    type_0 = module_4.object
    str_0 = "object"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_31():
    type_0 = module_4.ellipsis
    str_0 = "ellipsis"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_32():
    type_0 = module_4.NotImplementedType
    str_0 = "NotImplementedType"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_33():
    type_0 = module_4.type
    str_0 = "type"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_34():
    type_0 = module_4.BaseException
    str_0 = "BaseException"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_35():
    type_0 = module_4.ArithmeticError
    str_0 = "ArithmeticError"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_36():
    type_0 = module_4.BufferError
    str_0 = "BufferError"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_37():
    type_0 = module_4.LookupError
    str_0 = "LookupError"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_38():
    type_0 = module_4.OSError
    str_0 = "OSError"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_39():
    type_0 = module_4.Warning
    str_0 = "Warning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_40():
    type_0 = module_4.UserWarning
    str_0 = "UserWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_41():
    type_0 = module_4.BytesWarning
    str_0 = "BytesWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_42():
    type_0 = module_4.ResourceWarning
    str_0 = "ResourceWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_43():
    type_0 = module_4.FutureWarning
    str_0 = "FutureWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_44():
    type_0 = module_4.ImportWarning
    str_0 = "ImportWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_45():
    type_0 = module_4.UnicodeWarning
    str_0 = "UnicodeWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_46():
    type_0 = module_4.SyntaxWarning
    str_0 = "SyntaxWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_47():
    type_0 = module_4.RuntimeWarning
    str_0 = "RuntimeWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_48():
    type_0 = module_4.PendingDeprecationWarning
    str_0 = "PendingDeprecationWarning"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    type_0 = module_4.bytes
    str_0 = "bytes"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
@pytest.mark.xfail(strict=True)
def test_case_50():
    type_0 = module_4.bytearray
    str_0 = "bytearray"
    dict_0 = {}
    module_0.inspect_enum_type(type_0, str_0, dict_0)
