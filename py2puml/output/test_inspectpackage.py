# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import inspectpackage as module_0
import pkgutil as module_1
import py2puml.inspection.inspectmodule as module_2
import py2puml.domain.umlrelation as module_3
import builtins as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "m\x0b"
    set_0 = {str_0, str_0}
    list_0 = []
    var_0 = module_0.inspect_package(str_0, str_0, set_0, list_0)
    str_1 = "]"
    str_2 = ".\x0c]B"
    var_1 = module_0.inspect_package(str_2, str_2, var_0, list_0)
    none_type_0 = None
    var_2 = module_0.inspect_package(str_1, str_1, str_1, none_type_0)
    str_3 = "|cAncH{]eC#f,DU"
    bool_0 = True
    var_3 = module_1.walk_packages(prefix=str_3, onerror=bool_0)
    var_4 = var_3.__repr__()
    str_4 = "\tYN:-HFUlw<sTi"
    var_5 = module_0.inspect_package(str_4, var_0, bool_0, none_type_0)
    str_5 = "{ULZ\r"
    module_0.inspect_package(bool_0, str_5, var_4, var_4)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -2474
    str_0 = ".__init__"
    str_1 = 'tF8Gf:"&b;Im'
    none_type_0 = None
    int_1 = -349
    str_2 = "L"
    var_0 = module_2.inspect_module(none_type_0, str_1, str_0, int_0)
    var_1 = var_0.__eq__(none_type_0)
    str_3 = "J6# .F+"
    dict_0 = {str_1: var_1, str_1: var_1, str_3: var_1, str_0: var_1}
    module_0.inspect_package(int_1, str_2, dict_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    bytes_0 = b"c@\xbf\x04\x88/\xac\xf9\xa3\x99\xea\xa8\xa7\x1e\xd0\x9cK\xd0\xb6\xf4"
    int_0 = -2681
    str_0 = '[\x0bN"arP\x0b)/k/Q31~-'
    none_type_0 = None
    var_0 = module_1.walk_packages(prefix=none_type_0, onerror=str_0)
    dict_0 = {str_0: var_0}
    var_1 = module_2.inspect_module(int_0, int_0, dict_0, var_0)
    var_2 = var_1.__eq__(bytes_0)
    var_3 = var_2.__eq__(tuple_0)
    module_0.inspect_package(var_3, str_0, var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 505
    str_0 = "R#R"
    dict_0 = {}
    str_1 = "id"
    module_0.inspect_package(int_0, str_1, dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    str_0 = "\n    Adds the definitions:\n    - of the inspected type\n    - of its static attributes from the class annotations (type and relation)\n    "
    none_type_0 = None
    str_1 = "JNjcWTf:F]k`izA"
    uml_relation_0 = module_3.UmlRelation(bool_0, str_1, bool_0)
    list_0 = [uml_relation_0, uml_relation_0]
    var_0 = module_0.inspect_package(str_0, bool_0, none_type_0, list_0)
    dict_0 = {}
    module_0.inspect_package(bool_0, str_0, dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ""
    var_0 = module_1.walk_packages(str_0, onerror=str_0)
    bool_0 = False
    str_1 = "o;*b[t"
    var_1 = module_1.walk_packages(prefix=str_0)
    var_2 = var_1.__repr__()
    dict_0 = {str_0: var_2}
    var_3 = module_2.inspect_module(bool_0, str_1, dict_0, str_1)
    var_4 = var_3.__eq__(var_0)
    str_2 = ""
    module_0.inspect_package(str_0, str_2, var_0, var_0)


def test_case_6():
    str_0 = "r7?+ia"
    str_1 = ") [9E=LT!\r"
    str_2 = ">GVEHXd!($DT"
    none_type_0 = None
    var_0 = module_0.inspect_package(str_1, str_2, none_type_0, none_type_0)
    list_0 = [var_0]
    var_1 = module_0.inspect_package(str_0, str_1, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\xb5?\x19;\xaf<m\x0c\x9d"\xa0\xba\xabP\xa7'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = []
    str_0 = '9p$J\t(<=uT2x"Tc?y'
    none_type_0 = None
    var_0 = module_0.inspect_package(str_0, none_type_0, dict_0, list_0)
    module_0.inspect_package(list_0, var_0, none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_4.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b""
    str_0 = "\x0bp.FdB"
    none_type_0 = None
    var_0 = module_1.walk_packages(none_type_0, bytes_0, none_type_0)
    list_0 = [var_0]
    module_0.inspect_package(bytes_0, str_0, str_0, list_0)
