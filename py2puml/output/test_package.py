# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import package as module_0
import dataclasses as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    float_0 = 903.746
    str_0 = '5pX(h~X()s"$f@F'
    none_type_1 = None
    package_0 = module_0.Package(str_0, none_type_1)
    assert package_0.items_number == 0
    assert module_0.Package.items_number == 0
    var_0 = package_0.__eq__(float_0)
    var_1 = var_0.__eq__(none_type_0)
    str_1 = "<oO[Jszft\\u&9"
    package_1 = module_0.Package(str_1)
    assert package_1.items_number == 0
    var_2 = package_1.__eq__(str_1)
    bytes_0 = b"F9\xf5\xec\xd4"
    var_3 = package_1.__eq__(bytes_0)
    var_4 = package_1.__eq__(package_1)
    var_5 = package_1.__repr__()
    assert var_5 == "Package(name='<oO[Jszft\\\\u&9', children=[], items_number=0)"
    package_2 = module_0.Package(var_4, var_5)
    assert (
        package_2.children
        == "Package(name='<oO[Jszft\\\\u&9', children=[], items_number=0)"
    )
    assert package_2.items_number == 0
    var_6 = var_5.__repr__()
    assert (
        var_6 == "\"Package(name='<oO[Jszft\\\\\\\\u&9', children=[], items_number=0)\""
    )
    package_3 = module_0.Package(str_1)
    assert package_3.items_number == 0
    var_7 = var_4.__repr__()
    var_8 = package_1.__eq__(package_1)
    var_9 = var_5.__repr__()
    assert (
        var_9 == "\"Package(name='<oO[Jszft\\\\\\\\u&9', children=[], items_number=0)\""
    )
    var_10 = package_3.__eq__(var_6)
    package_4 = module_0.Package(var_3, bytes_0)
    assert package_4.items_number == 0
    str_2 = "uVUufI-R5\n>"
    package_5 = module_0.Package(str_2, items_number=str_2)
    var_11 = package_1.__repr__()
    assert var_11 == "Package(name='<oO[Jszft\\\\u&9', children=[], items_number=0)"
    var_12 = package_3.__repr__()
    assert var_12 == "Package(name='<oO[Jszft\\\\u&9', children=[], items_number=0)"


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    bytes_0 = b"\x01\x9cDA\xec\xe4`\xe7\xcb\x97oK\xccJ\xb1\x9cQ\xcb^"
    none_type_0 = None
    str_0 = "\n    Collects the variables and their type annotations from the signature of a constructor method\n    "
    package_0 = module_0.Package(str_0)
    assert package_0.items_number == 0
    assert module_0.Package.items_number == 0
    var_0 = package_0.__repr__()
    assert (
        var_0
        == "Package(name='\\n    Collects the variables and their type annotations from the signature of a constructor method\\n    ', children=[], items_number=0)"
    )
    var_1 = var_0.__eq__(none_type_0)
    var_2 = var_1.__eq__(bytes_0)
    str_1 = "}vws"
    package_1 = module_0.Package(str_1)
    assert package_1.items_number == 0
    none_type_1 = None
    set_0 = {none_type_1}
    module_1.field(hash=bytes_0, compare=bool_0, metadata=bool_0, kw_only=set_0)


def test_case_2():
    bool_0 = False
    bytes_0 = b"\xa3J\xc5\xbc\xa0\xbf\xfd"
    var_0 = module_1.field(repr=bytes_0)
    var_1 = var_0.__eq__(bool_0)
    bool_1 = False
    package_0 = module_0.Package(bool_1, items_number=bool_1)
    assert module_0.Package.items_number == 0
    var_2 = package_0.__eq__(package_0)
    package_1 = module_0.Package(var_0, var_1, bool_0)
    var_3 = var_2.__repr__()
    var_4 = package_0.__eq__(var_2)
    var_5 = var_1.__eq__(var_0)
    var_6 = module_1.field(hash=bool_1)
    var_7 = var_0.__repr__()
    var_8 = var_4.__repr__()
    var_9 = var_6.__repr__()
    var_10 = var_6.__repr__()


def test_case_3():
    str_0 = "b'\n=f-p\t1%oZ.j."
    package_0 = module_0.Package(str_0, str_0)
    assert package_0.items_number == 0
    assert module_0.Package.items_number == 0
    var_0 = package_0.__eq__(str_0)
    package_1 = module_0.Package(package_0)
    assert package_1.items_number == 0
    var_1 = package_1.__repr__()
    assert (
        var_1
        == 'Package(name=Package(name="b\'\\n=f-p\\t1%oZ.j.", children="b\'\\n=f-p\\t1%oZ.j.", items_number=0), children=[], items_number=0)'
    )
    var_2 = var_1.__eq__(package_0)
    var_3 = module_1.dataclass(
        order=str_0, unsafe_hash=package_1, match_args=var_1, kw_only=str_0, slots=var_1
    )
    var_4 = var_3.__eq__(var_1)
    str_1 = "kRm"
    package_2 = module_0.Package(str_1)
    assert package_2.items_number == 0
    var_5 = package_0.__repr__()
    assert (
        var_5
        == 'Package(name="b\'\\n=f-p\\t1%oZ.j.", children="b\'\\n=f-p\\t1%oZ.j.", items_number=0)'
    )
    str_2 = ""
    var_6 = package_1.__repr__()
    assert (
        var_6
        == 'Package(name=Package(name="b\'\\n=f-p\\t1%oZ.j.", children="b\'\\n=f-p\\t1%oZ.j.", items_number=0), children=[], items_number=0)'
    )
    var_7 = var_6.__repr__()
    assert (
        var_7
        == "'Package(name=Package(name=\"b\\'\\\\n=f-p\\\\t1%oZ.j.\", children=\"b\\'\\\\n=f-p\\\\t1%oZ.j.\", items_number=0), children=[], items_number=0)'"
    )
    package_3 = module_0.Package(str_2)
    assert package_3.items_number == 0
    var_8 = package_0.__repr__()
    assert (
        var_8
        == 'Package(name="b\'\\n=f-p\\t1%oZ.j.", children="b\'\\n=f-p\\t1%oZ.j.", items_number=0)'
    )
    var_9 = var_1.__eq__(var_8)
    var_10 = var_6.__repr__()
    assert (
        var_10
        == "'Package(name=Package(name=\"b\\'\\\\n=f-p\\\\t1%oZ.j.\", children=\"b\\'\\\\n=f-p\\\\t1%oZ.j.\", items_number=0), children=[], items_number=0)'"
    )
    bool_0 = False
    int_0 = 991
    package_4 = module_0.Package(var_4, items_number=int_0)
    dict_0 = {var_10: var_4, var_7: var_5, var_10: var_1}
    var_11 = var_6.__eq__(var_8)
    var_12 = package_3.__eq__(dict_0)
    var_13 = var_12.__eq__(var_8)
    var_14 = package_3.__eq__(bool_0)


def test_case_4():
    str_0 = '^,U\x0b36)*I;,">\\ZFS-l['
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.dataclass(
        init=str_0,
        repr=none_type_1,
        match_args=str_0,
        kw_only=none_type_1,
        slots=none_type_1,
    )
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_3.__eq__(none_type_0)
    var_5 = var_4.__eq__(str_0)
    var_6 = var_5.__repr__()
    package_0 = module_0.Package(str_0)
    assert package_0.items_number == 0
    assert module_0.Package.items_number == 0
    var_7 = package_0.__repr__()
    assert (
        var_7
        == "Package(name='^,U\\x0b36)*I;,\">\\\\ZFS-l[', children=[], items_number=0)"
    )
    str_1 = "~v6{Tt@"
    var_8 = package_0.__eq__(package_0)
    var_9 = package_0.__eq__(var_8)
    var_10 = var_8.__eq__(var_7)
    var_11 = package_0.__repr__()
    assert (
        var_11
        == "Package(name='^,U\\x0b36)*I;,\">\\\\ZFS-l[', children=[], items_number=0)"
    )
    var_12 = var_7.__repr__()
    assert (
        var_12
        == "'Package(name=\\'^,U\\\\x0b36)*I;,\">\\\\\\\\ZFS-l[\\', children=[], items_number=0)'"
    )
    str_2 = "HQKrug%"
    str_3 = "b! N:f]!n\t"
    var_13 = var_11.__repr__()
    assert (
        var_13
        == "'Package(name=\\'^,U\\\\x0b36)*I;,\">\\\\\\\\ZFS-l[\\', children=[], items_number=0)'"
    )
    var_14 = var_13.__repr__()
    assert (
        var_14
        == "'\\'Package(name=\\\\\\'^,U\\\\\\\\x0b36)*I;,\">\\\\\\\\\\\\\\\\ZFS-l[\\\\\\', children=[], items_number=0)\\''"
    )
    list_0 = [var_7, str_0, str_3, var_12]
    package_1 = module_0.Package(str_3, list_0)
    assert package_1.children == [
        "Package(name='^,U\\x0b36)*I;,\">\\\\ZFS-l[', children=[], items_number=0)",
        '^,U\x0b36)*I;,">\\ZFS-l[',
        "b! N:f]!n\t",
        "'Package(name=\\'^,U\\\\x0b36)*I;,\">\\\\\\\\ZFS-l[\\', children=[], items_number=0)'",
    ]
    assert package_1.items_number == 0
    var_15 = package_0.__eq__(str_2)
    var_16 = var_14.__eq__(package_0)
    var_17 = package_0.__eq__(str_2)
    var_18 = var_17.__repr__()
    package_2 = module_0.Package(var_15, items_number=str_0)
    var_19 = var_17.__eq__(str_0)
    package_3 = module_0.Package(str_2)
    assert package_3.items_number == 0
    var_20 = var_17.__repr__()
    var_21 = package_3.__eq__(str_1)
    var_22 = var_21.__eq__(package_0)
    var_23 = var_22.__repr__()
    var_24 = var_21.__eq__(str_1)
    var_25 = var_21.__eq__(var_24)


def test_case_5():
    float_0 = 1649.0312
    float_1 = -1537.068
    package_0 = module_0.Package(float_1, float_1)
    assert package_0.items_number == 0
    assert module_0.Package.items_number == 0
    var_0 = module_1.field(init=package_0, kw_only=float_1)
    var_1 = var_0.__eq__(float_0)
    list_0 = []
    var_2 = module_1.field(default_factory=list_0)
    var_3 = var_2.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    list_0 = []
    bool_0 = False
    package_0 = module_0.Package(list_0, items_number=bool_0)
    assert module_0.Package.items_number == 0
    package_1 = module_0.Package(set_0)
    assert package_1.items_number == 0
    package_2 = module_0.Package(set_0, list_0)
    assert package_2.items_number == 0
    package_3 = module_0.Package(package_2, items_number=list_0)
    object_0 = module_2.object()
    list_1 = []
    package_4 = module_0.Package(object_0, list_1)
    assert package_4.items_number == 0
    none_type_0 = None
    var_0 = package_4.__eq__(package_4)
    module_1.dataclass(
        list_1, init=package_1, eq=none_type_0, match_args=package_2, kw_only=list_0
    )
