# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import umlrelation as module_0
import enum as module_1
import dataclasses as module_2


def test_case_0():
    rel_type_0 = module_0.RelType.INHERITANCE
    str_0 = "`\n"
    uml_relation_0 = module_0.UmlRelation(rel_type_0, str_0, rel_type_0)
    var_0 = uml_relation_0.__eq__(str_0)
    uml_relation_1 = module_0.UmlRelation(str_0, var_0, var_0)
    var_1 = uml_relation_1.__eq__(uml_relation_0)
    var_2 = var_0.__repr__()
    var_3 = uml_relation_0.__repr__()
    assert (
        var_3
        == "UmlRelation(source_fqn=<RelType.INHERITANCE: '<|'>, target_fqn='`\\n', type=<RelType.INHERITANCE: '<|'>)"
    )
    var_4 = uml_relation_0.__repr__()
    assert (
        var_4
        == "UmlRelation(source_fqn=<RelType.INHERITANCE: '<|'>, target_fqn='`\\n', type=<RelType.INHERITANCE: '<|'>)"
    )
    str_1 = "r$9"
    uml_relation_2 = module_0.UmlRelation(var_3, str_1, var_3)
    assert (
        uml_relation_2.source_fqn
        == "UmlRelation(source_fqn=<RelType.INHERITANCE: '<|'>, target_fqn='`\\n', type=<RelType.INHERITANCE: '<|'>)"
    )
    assert (
        uml_relation_2.type
        == "UmlRelation(source_fqn=<RelType.INHERITANCE: '<|'>, target_fqn='`\\n', type=<RelType.INHERITANCE: '<|'>)"
    )
    var_5 = uml_relation_0.__repr__()
    assert (
        var_5
        == "UmlRelation(source_fqn=<RelType.INHERITANCE: '<|'>, target_fqn='`\\n', type=<RelType.INHERITANCE: '<|'>)"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "UI\x0b"
    str_1 = "{"
    str_2 = "y,KjgPu!'95![VQo,lrO"
    none_type_0 = None
    uml_relation_0 = module_0.UmlRelation(str_1, str_2, none_type_0)
    var_0 = uml_relation_0.__eq__(str_0)
    var_1 = var_0.__eq__(str_0)
    var_2 = var_1.__repr__()
    uml_relation_1 = module_0.UmlRelation(str_0, str_0, var_2)
    uml_relation_2 = module_0.UmlRelation(uml_relation_1, var_1, var_1)
    bool_0 = True
    module_1.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    rel_type_0 = module_0.RelType.INHERITANCE
    str_0 = '"Ngs3bSKkK\r'
    none_type_0 = None
    uml_relation_0 = module_0.UmlRelation(str_0, rel_type_0, none_type_0)
    module_1.unique(rel_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    uml_relation_0 = module_0.UmlRelation(str_0, str_0, dict_0)
    none_type_0 = None
    module_1.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    rel_type_0 = module_0.RelType.COMPOSITION
    str_0 = "\n02|M]b[jTDJ\r~?"
    none_type_0 = None
    module_2.dataclass(
        str_0, repr=rel_type_0, eq=rel_type_0, match_args=str_0, slots=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    module_2.dataclass(bool_0, eq=bool_0, order=bool_0, kw_only=bool_0, slots=bool_0)
