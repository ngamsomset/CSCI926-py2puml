# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import re as module_0
import compoundtypesplitter as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "`QRTZf O["
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.Pattern()


def test_case_2():
    str_0 = "mm?R"
    str_1 = '9jai"/JwhnGS'
    str_2 = module_1.remove_forward_references(str_1, str_0)
    assert str_2 == '9jai"/JwhnGS'
    assert module_1.SPLITTING_CHARACTERS == ("[", "]", ",")
    var_0 = module_0.compile(str_2)
    str_3 = "%ae76hC-"
    with pytest.raises(ValueError):
        module_1.CompoundTypeSplitter(str_3, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.Pattern()


def test_case_4():
    str_0 = "/G-PVwu@U0'|WK\r^"
    with pytest.raises(ValueError):
        module_1.CompoundTypeSplitter(str_0, str_0)


def test_case_5():
    str_0 = "rB"
    str_1 = ""
    compound_type_splitter_0 = module_1.CompoundTypeSplitter(str_0, str_1)
    assert (
        f"{type(compound_type_splitter_0).__module__}.{type(compound_type_splitter_0).__qualname__}"
        == "compoundtypesplitter.CompoundTypeSplitter"
    )
    assert compound_type_splitter_0.compound_type_annotation == "rB"
    assert module_1.SPLITTING_CHARACTERS == ("[", "]", ",")
    tuple_0 = compound_type_splitter_0.get_parts()
    tuple_1 = compound_type_splitter_0.get_parts()
    none_type_0 = None
    with pytest.raises(ValueError):
        module_1.CompoundTypeSplitter(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.CompoundTypeSplitter(set_0, list_0)


def test_case_7():
    str_0 = " lines"
    compound_type_splitter_0 = module_1.CompoundTypeSplitter(str_0, str_0)
    assert (
        f"{type(compound_type_splitter_0).__module__}.{type(compound_type_splitter_0).__qualname__}"
        == "compoundtypesplitter.CompoundTypeSplitter"
    )
    assert compound_type_splitter_0.compound_type_annotation == " lines"
    assert module_1.SPLITTING_CHARACTERS == ("[", "]", ",")
    tuple_0 = compound_type_splitter_0.get_parts()
    tuple_1 = compound_type_splitter_0.get_parts()
    none_type_0 = None
    with pytest.raises(ValueError):
        module_1.CompoundTypeSplitter(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    str_0 = "["
    str_1 = module_1.remove_forward_references(str_0, str_0)
    assert str_1 == "["
    assert module_1.SPLITTING_CHARACTERS == ("[", "]", ",")
    compound_type_splitter_0 = module_1.CompoundTypeSplitter(str_0, str_1)
    assert (
        f"{type(compound_type_splitter_0).__module__}.{type(compound_type_splitter_0).__qualname__}"
        == "compoundtypesplitter.CompoundTypeSplitter"
    )
    assert compound_type_splitter_0.compound_type_annotation == "["
    tuple_0 = compound_type_splitter_0.get_parts()
    module_1.CompoundTypeSplitter(set_0, set_0)


def test_case_9():
    str_0 = ": it needs to be imported explicitely."
    str_1 = "9\x0c)^=~:Y5t_r"
    str_2 = module_1.remove_forward_references(str_1, str_0)
    assert str_2 == "9\x0c)^=~:Y5t_r"
    assert module_1.SPLITTING_CHARACTERS == ("[", "]", ",")
    str_3 = "^%'1@L{?+DXg~+boyP"
    str_4 = module_1.remove_forward_references(str_3, str_0)
    with pytest.raises(ValueError):
        module_1.CompoundTypeSplitter(str_0, str_0)
