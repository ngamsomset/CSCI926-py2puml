# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import builtins as module_0
import py2puml.domain.umlenum as module_1
import inspectenum as module_2
import py2puml.domain.umlitem as module_3
import enum as module_4


def test_case_0():
    type_0 = module_0.float
    str_0 = "pKWA7w24cN"
    member_0 = module_1.Member(str_0, type_0)
    var_0 = member_0.__eq__(type_0)
    str_1 = "r"
    dict_0 = {str_0: var_0, str_1: var_0}
    module_2.inspect_enum_type(type_0, type_0, dict_0)


def test_case_1():
    str_0 = "2gC#hd\x0b"
    none_type_0 = None
    member_0 = module_1.Member(str_0, none_type_0)
    type_0 = module_0.list
    uml_enum_0 = module_1.UmlEnum(none_type_0, str_0, type_0)
    var_0 = uml_enum_0.__repr__()
    dict_0 = {str_0: var_0}
    module_2.inspect_enum_type(type_0, str_0, dict_0)


def test_case_2():
    str_0 = "5?\t"
    type_0 = module_0.set
    str_1 = "[\r>.m.3p9z(5Zh.<v"
    module_2.inspect_enum_type(type_0, str_1, str_0)


def test_case_3():
    str_0 = "type_expr"
    type_0 = module_0.dict
    module_2.inspect_enum_type(type_0, str_0, type_0)


def test_case_4():
    type_0 = module_0.type
    none_type_0 = None
    none_type_1 = None
    str_0 = "\\-Z S67@tZ@O"
    member_0 = module_1.Member(str_0, type_0)
    uml_item_0 = module_3.UmlItem(none_type_1, member_0)
    var_0 = uml_item_0.__repr__()
    var_1 = var_0.__eq__(none_type_0)
    module_2.inspect_enum_type(type_0, var_1, var_1)


def test_case_5():
    type_0 = module_0.set
    str_0 = ";,t"
    str_1 = "# ,H^pY'zCpwR1"
    uml_enum_0 = module_1.UmlEnum(str_0, str_1, str_1)
    dict_0 = {str_1: uml_enum_0, str_0: uml_enum_0}
    module_2.inspect_enum_type(type_0, type_0, dict_0)


def test_case_6():
    type_0 = module_4.Enum
    type_1 = module_4.Enum
    str_0 = ">KG$nu"
    dict_0 = {str_0: str_0}
    uml_item_0 = module_3.UmlItem(type_1, dict_0)
    var_0 = uml_item_0.__eq__(type_1)
    dict_1 = {str_0: var_0}
    var_1 = module_2.inspect_enum_type(type_1, type_1, dict_1)
    module_2.inspect_enum_type(type_0, type_0, type_0)


def test_case_7():
    type_0 = module_1.Member
    none_type_0 = None
    module_2.inspect_enum_type(type_0, type_0, none_type_0)


def test_case_8():
    str_0 = "\t0]UG"
    none_type_0 = None
    module_2.inspect_enum_type(none_type_0, str_0, str_0)
