# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import ast as module_0
import astvisitors as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    arg_0 = module_0.arg()
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.SignatureVariablesCollector(none_type_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"CE\x9f\x02{G"
    str_0 = 'tDB" \x0cN\x0c9mi]'
    none_type_0 = None
    dict_0 = {}
    str_1 = "6JuR\nhi}-F"
    dict_1 = {str_0: dict_0, str_0: none_type_0, str_1: bytes_0, str_1: str_0}
    module_1.ConstructorVisitor(
        bytes_0, str_0, none_type_0, none_type_0, *bytes_0, **dict_1
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = -411.0371 - 418.257j
    list_0 = [complex_0]
    module_1.Variable(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    node_visitor_0 = module_0.NodeVisitor()
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    subscript_0 = module_0.Subscript(*list_0)
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(
        none_type_0, subscript_0
    )
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id is None
    assert (
        f"{type(assigned_variables_collector_0.annotation).__module__}.{type(assigned_variables_collector_0.annotation).__qualname__}"
        == "ast.Subscript"
    )
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    str_0 = "$`F7Jk>~\x0bbE"
    var_0 = assigned_variables_collector_0.visit_Attribute(subscript_0)
    assigned_variables_collector_0.visit_Constant(str_0)


def test_case_4():
    node_visitor_0 = module_0.NodeVisitor()
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    subscript_0 = module_0.Subscript(*list_0)
    assigned_variables_collector_0 = module_1.AssignedVariablesCollector(
        none_type_0, subscript_0
    )
    assert (
        f"{type(assigned_variables_collector_0).__module__}.{type(assigned_variables_collector_0).__qualname__}"
        == "astvisitors.AssignedVariablesCollector"
    )
    assert assigned_variables_collector_0.class_self_id is None
    assert (
        f"{type(assigned_variables_collector_0.annotation).__module__}.{type(assigned_variables_collector_0.annotation).__qualname__}"
        == "ast.Subscript"
    )
    assert assigned_variables_collector_0.variables == []
    assert assigned_variables_collector_0.self_attributes == []
    var_0 = assigned_variables_collector_0.visit_Subscript(node_visitor_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '0I7~lg"zul/S'
    tuple_0 = (str_0,)
    var_0 = module_0.get_source_segment(str_0, tuple_0)
    var_1 = var_0.__repr__()
    var_1.generic_visit(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    signature_variables_collector_0 = module_1.SignatureVariablesCollector(none_type_0)
    assert (
        f"{type(signature_variables_collector_0).__module__}.{type(signature_variables_collector_0).__qualname__}"
        == "astvisitors.SignatureVariablesCollector"
    )
    assert signature_variables_collector_0.constructor_source is None
    assert signature_variables_collector_0.class_self_id is None
    assert signature_variables_collector_0.variables == []
    str_0 = "\n    Collects the variables and heir type annotations from the signature of a constructormethod\n    "
    signature_variables_collector_0.visit_arg(str_0)
