# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import moduleresolver as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1
    module_resolver_0 = module_0.ModuleResolver(int_0)
    module_resolver_0.get_module_full_name()


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "n"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.search_in_module(list_0, str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(var_0) == 2
    bytes_0 = b"\xd2\xcb\x92\x8e"
    module_resolver_0 = module_0.ModuleResolver(bytes_0)
    bool_0 = True
    str_1 = "%&cozX~X\tw0j"
    var_1 = module_0.search_in_module_or_builtins(bool_0, str_1)
    str_2 = var_1.__repr__()
    var_1.get_module_full_name()


@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.NamespacedType()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "AZ_}gLOrXd#d5w]ws"
    module_resolver_0 = module_0.ModuleResolver(str_0)
    module_resolver_1 = module_0.ModuleResolver(module_resolver_0)
    namespaced_type_0 = module_resolver_1.resolve_full_namespace_type(str_0)
    module_resolver_1.resolve_full_namespace_type(module_resolver_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_resolver_0 = module_0.ModuleResolver(bool_0)
    str_0 = "@`\\o"
    str_1 = module_resolver_0.__repr__()
    assert str_1 == "ModuleResolver(True)"
    var_0 = module_0.search_in_module_or_builtins(module_resolver_0, str_0)
    module_0.search_in_module(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    bytes_0 = b"\x89\x85\x1fO\xb4c\xcdK"
    module_resolver_0 = module_0.ModuleResolver(none_type_0)
    module_resolver_1 = module_0.ModuleResolver(bytes_0)
    namespaced_type_0 = module_resolver_1.resolve_full_namespace_type(none_type_0)
    assert (
        f"{type(namespaced_type_0).__module__}.{type(namespaced_type_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(namespaced_type_0) == 2
    str_0 = ";*]@M)Pjd?l[30<\x0bb\t)5"
    str_1 = "r"
    str_2 = "iY;O[2?>#!ccXKMY?"
    list_0 = [str_0, str_1, str_0, str_2]
    str_3 = module_resolver_0.__repr__()
    assert str_3 == "ModuleResolver(None)"
    module_resolver_2 = module_0.ModuleResolver(str_1)
    var_0 = module_0.search_in_module(list_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "moduleresolver.NamespacedType"
    )
    assert len(var_0) == 2
    module_0.NamespacedType()


@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    module_0.search_in_module(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 2466
    module_resolver_0 = module_0.ModuleResolver(int_0)
    module_0.search_in_module_or_builtins(module_resolver_0, module_resolver_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    str_0 = "\ta"
    complex_0 = 4499.369 + 267.42573j
    str_1 = "(8\\@m6,Y3|{vK0r@h"
    var_0 = module_0.search_in_module_or_builtins(complex_0, str_1)
    module_resolver_0 = module_0.ModuleResolver(str_0)
    module_resolver_0.resolve_full_namespace_type(list_0)
