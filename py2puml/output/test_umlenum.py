# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import dataclasses as module_0
import umlenum as module_1
import py2puml.domain.umlitem as module_2


def test_case_0():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.dataclass(
        init=bool_0, eq=bool_0, order=bool_0, frozen=bool_0, slots=none_type_0
    )
    var_1 = var_0.__repr__()
    int_0 = -1390
    var_2 = var_0.__repr__()
    var_3 = var_2.__eq__(var_1)
    float_0 = -1759.1
    str_0 = "G&!"
    none_type_1 = None
    uml_enum_0 = module_1.UmlEnum(str_0, none_type_1, bool_0)
    var_4 = uml_enum_0.__eq__(bool_0)
    var_5 = module_0.dataclass(
        init=int_0, repr=int_0, unsafe_hash=float_0, kw_only=int_0
    )
    var_6 = var_5.__repr__()
    var_7 = var_5.__repr__()
    var_8 = var_7.__repr__()
    none_type_2 = None
    var_9 = var_7.__eq__(none_type_2)
    var_10 = var_9.__eq__(var_5)
    var_11 = var_9.__repr__()
    var_12 = var_8.__eq__(var_5)
    uml_enum_1 = module_1.UmlEnum(var_6, bool_0, float_0)
    var_13 = var_6.__repr__()
    str_1 = "the module name of the domain"
    var_14 = var_4.__eq__(var_8)
    uml_enum_2 = module_1.UmlEnum(var_6, str_1, bool_0)
    var_15 = var_8.__repr__()
    var_16 = var_8.__repr__()
    var_17 = uml_enum_2.__eq__(str_1)
    var_18 = var_15.__repr__()
    var_19 = var_18.__repr__()
    var_20 = var_16.__repr__()
    var_21 = var_19.__repr__()
    var_22 = var_5.__eq__(var_15)
    var_23 = var_21.__eq__(bool_0)


def test_case_1():
    str_0 = ".D~|r\tNp]VC vgVAe3"
    uml_enum_0 = module_1.UmlEnum(str_0, str_0, str_0)


def test_case_2():
    bytes_0 = b"\x9d\x1f"
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    list_0 = []
    uml_enum_0 = module_1.UmlEnum(none_type_0, none_type_0, list_0)
    var_0 = uml_enum_0.__eq__(bool_1)
    var_1 = var_0.__eq__(bool_0)
    var_2 = var_1.__repr__()
    uml_item_0 = module_2.UmlItem(bytes_0, var_2)
    var_3 = uml_item_0.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__eq__(bytes_0)
    var_6 = var_5.__repr__()
    list_1 = [bytes_0, bytes_0, bytes_0, bytes_0]
    int_0 = 2615
    none_type_1 = None
    member_0 = module_1.Member(bytes_0, bytes_0)
    var_7 = module_0.dataclass(eq=none_type_1)
    var_8 = var_7.__repr__()
    var_9 = var_8.__repr__()
    var_10 = var_9.__eq__(list_1)
    var_11 = var_10.__eq__(list_1)
    var_12 = var_11.__repr__()
    var_13 = var_11.__repr__()
    str_0 = ": actual_line="
    member_1 = module_1.Member(int_0, str_0)
    var_14 = member_0.__eq__(var_9)
    var_15 = member_1.__eq__(member_1)
    var_16 = member_1.__eq__(list_1)
    member_2 = module_1.Member(var_16, int_0)


def test_case_3():
    int_0 = -1812
    bytes_0 = b"\xa8\\\xb3D\x9d\xe5\xb3\xc0\x1b\xb2\x96lU>\xfa"
    str_0 = "zC`w(n\x0cq<3?I<B"
    uml_item_0 = module_2.UmlItem(str_0, str_0)
    var_0 = uml_item_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__eq__(bytes_0)
    var_4 = var_3.__repr__()
    var_5 = var_4.__eq__(int_0)


def test_case_4():
    str_0 = "+4'$Nw]zJ\\#VLsIs\"?"
    str_1 = "9y\\yz\\Ctm<{S"
    none_type_0 = None
    none_type_1 = None
    uml_item_0 = module_2.UmlItem(str_1, str_1)
    var_0 = uml_item_0.__repr__()
    var_1 = var_0.__eq__(none_type_1)
    var_2 = var_0.__repr__()
    var_3 = var_1.__eq__(none_type_0)
    var_4 = var_3.__repr__()
    list_0 = [var_3, var_4]
    uml_enum_0 = module_1.UmlEnum(str_0, str_1, list_0)
    str_2 = "A~Ld'9w51NG"
    var_5 = var_0.__eq__(none_type_1)
    list_1 = []
    uml_enum_1 = module_1.UmlEnum(str_2, str_2, list_1)
    var_6 = uml_enum_1.__eq__(str_0)
    var_7 = var_6.__eq__(str_0)
    var_8 = var_7.__eq__(uml_enum_0)
    var_9 = var_8.__eq__(str_0)
    int_0 = 374
    set_0 = {str_0, int_0, str_0}
    bool_0 = False
    float_0 = -1283.091
    str_3 = "jwv:q3vtw/3vh"
    str_4 = ""
    uml_enum_2 = module_1.UmlEnum(str_3, str_4, str_3)
    var_10 = uml_enum_2.__eq__(float_0)
    var_11 = var_10.__eq__(bool_0)
    str_5 = "r4+^(!"
    uml_enum_3 = module_1.UmlEnum(str_5, str_5, str_5)
    var_12 = uml_enum_3.__eq__(var_11)
    var_13 = var_12.__eq__(set_0)
    var_14 = var_13.__repr__()


def test_case_5():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    bool_2 = False
    str_0 = "\n    In the string representation of a compound type annotation, the elementary types can be prefixed by their packages or sub-packages.\n    Like in 'Dict[datetime.datetime,typing.List[Worker]]'. This function returns a tuple of 2 values:\n    - a string representation with shortened types for display purposes in the PlantUML documentation: 'Dict[datetime, List[Worker]]'\n      (note: a space is inserted after each coma for readability sake)\n    - a list of the fully-qualified types involved in the annotation: ['typing.Dict', 'datetime.datetime', 'typing.List', 'mymodule.Worker']\n    "
    uml_item_0 = module_2.UmlItem(bool_2, str_0)
    var_0 = uml_item_0.__repr__()
    var_1 = var_0.__eq__(bool_1)
    var_2 = var_1.__eq__(none_type_0)
    var_3 = var_2.__eq__(bool_1)
    module_0.dataclass(bool_1, init=bool_1, eq=bool_0, unsafe_hash=bool_0, slots=bool_0)


def test_case_6():
    str_0 = "7<`\n]0DOta:ULQ>68f"
    member_0 = module_1.Member(str_0, str_0)
