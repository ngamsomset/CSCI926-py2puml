# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import builtins as module_0
import utils as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    type_0 = module_0.list
    var_0 = module_1.investigate_domain_definition(type_0)
    type_1 = module_0.list
    var_1 = module_1.investigate_domain_definition(type_0)
    var_2 = module_1.investigate_domain_definition(type_1)
    module_1.investigate_domain_definition(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    type_0 = module_0.list
    var_0 = module_1.investigate_domain_definition(type_0)
    str_0 = ">PO"
    module_1.investigate_domain_definition(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_1.investigate_domain_definition(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_1.investigate_domain_definition(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    type_0 = module_0.object
    var_0 = module_1.investigate_domain_definition(type_0)
    object_0 = module_0.object()
    module_1.investigate_domain_definition(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    object_0 = module_0.object()
    type_0 = module_0.bool
    type_1 = module_0.set
    var_0 = module_1.investigate_domain_definition(type_1)
    var_1 = module_1.investigate_domain_definition(type_0)
    var_2 = module_1.investigate_domain_definition(type_1)
    module_1.investigate_domain_definition(object_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    complex_0 = -2680 + 804.434j
    module_1.investigate_domain_definition(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    type_0 = module_0.complex
    var_0 = module_1.investigate_domain_definition(type_0)
    type_1 = module_0.object
    var_1 = module_1.investigate_domain_definition(type_1)
    dict_0 = {}
    module_1.investigate_domain_definition(dict_0)
