# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import py2puml.domain.umlclass as module_0
import inspectclass as module_1
import inspect as module_2
import builtins as module_3
import py2puml.parsing.moduleresolver as module_4
import dataclasses as module_5


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2055
    str_0 = "N,PFTYH\ndwwEr"
    bool_0 = True
    uml_class_0 = module_0.UmlClass(str_0, str_0, str_0, bool_0)
    type_0 = module_0.UmlAttribute
    str_1 = ".0F\x0b[\x0cUoF*4[e`\rW>"
    str_2 = "RdwrO<U^"
    str_3 = "LLvVQH]@{&Sf#8_TaM!3"
    dict_0 = {str_2: uml_class_0, str_3: uml_class_0}
    var_0 = module_1.handle_inheritance_relation(type_0, uml_class_0, str_2, bool_0)
    var_1 = var_0.__repr__()
    list_0 = [var_1]
    var_2 = module_1.inspect_dataclass_type(type_0, str_1, str_0, dict_0, list_0)
    var_3 = uml_class_0.__eq__(int_0)
    none_type_0 = None
    var_4 = module_2.isabstract(none_type_0)
    var_5 = uml_class_0.__eq__(var_4)
    var_6 = var_4.__repr__()
    type_1 = module_3.bytes
    module_1.inspect_class_type(type_1, int_0, var_5, var_5, var_3)


@pytest.mark.xfail(strict=True)
def test_case_1():
    type_0 = module_4.NamespacedType
    none_type_0 = None
    str_0 = "_4N-o6P"
    dict_0 = {}
    module_1.inspect_class_type(type_0, none_type_0, str_0, dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    type_0 = module_3.bytes
    str_0 = "')0d5G5mgvSfa?xy\\\"C|"
    none_type_0 = None
    dict_0 = {none_type_0: type_0}
    dict_1 = {}
    str_1 = ""
    list_0 = []
    var_0 = module_1.inspect_dataclass_type(type_0, none_type_0, str_1, dict_1, list_0)
    module_1.inspect_static_attributes(none_type_0, dict_0, str_0, dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    str_0 = "t\\@Lf\tDTW"
    str_1 = "oVkj,^ct_ixc? lhJ0"
    str_2 = "E"
    str_3 = "version"
    module_1.inspect_dataclass_type(str_1, str_2, str_3, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    type_0 = module_0.UmlClass
    str_0 = "\n    Collects the variabls and their type annotations from the signature of a constructor method\n    "
    module_1.inspect_static_attributes(type_0, str_0, str_0, type_0, type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    type_0 = module_3.type
    str_0 = "CqU"
    uml_class_0 = module_0.UmlClass(str_0, type_0, type_0, str_0)
    uml_class_0.get_module_full_name()


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "Ai\tqx:`+HDZ&y@"
    none_type_0 = None
    var_0 = module_2.isabstract(none_type_0)
    var_1 = module_5.dataclass(repr=var_0, eq=none_type_0, frozen=str_0)
    type_0 = module_3.type
    str_1 = ",U\neh,#J-O\\"
    module_1.inspect_static_attributes(type_0, var_0, str_1, type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    type_0 = module_0.UmlClass
    str_0 = "+x4WYgTT"
    str_1 = ", expected_line="
    var_0 = module_2.isabstract(str_0)
    var_1 = var_0.__eq__(str_0)
    str_2 = "9Gh\n3mhx0L'{}}J\th\n8"
    dict_0 = {str_0: var_1, str_2: var_0}
    module_1.inspect_class_type(type_0, str_0, str_1, dict_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    type_0 = module_3.tuple
    str_0 = "v96Hu^9x7\\+"
    uml_class_0 = module_0.UmlClass(type_0, str_0, type_0)
    str_1 = 'S"~V\x0c`1'
    none_type_0 = None
    var_0 = uml_class_0.__eq__(str_0)
    list_0 = [var_0, var_0, var_0]
    module_1.inspect_dataclass_type(type_0, str_1, str_1, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    type_0 = module_0.UmlClass
    str_0 = ""
    module_1.inspect_dataclass_type(type_0, str_0, str_0, dict_0, type_0)
