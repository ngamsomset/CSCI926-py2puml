# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import builtins as module_0
import dataclasses as module_1
import inspectmodule as module_2
import enum as module_3
import py2puml.domain.umlitem as module_4
import py2puml.inspection.inspectclass as module_5
import py2puml.domain.umlrelation as module_6


@pytest.mark.xfail(strict=True)
def test_case_0():
    type_0 = module_0.set
    str_0 = "_name"
    var_0 = module_1.is_dataclass(str_0)
    str_1 = " seems to be an invalid type annotation"
    dict_0 = {str_0: var_0, str_0: var_0, str_1: var_0}
    module_2.inspect_domain_definition(type_0, type_0, dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    type_0 = module_3.Enum
    str_0 = "T0MB9q$HX"
    dict_0 = {}
    var_0 = module_2.inspect_domain_definition(type_0, str_0, dict_0, none_type_0)
    var_1 = var_0.__eq__(type_0)
    var_2 = module_2.inspect_domain_definition(type_0, str_0, dict_0, var_1)
    str_1 = "\n    In the string representation of a compound type annotation, the elementary types can be prefixed by their packages or sub-packages.\n    Like in 'Dict[datetime.datetime,typing.List[Worker]]'. This function returns a tuple of 2 values:\n    - a string representation with shortened types for display purposes in the PlantUML documentation: 'Dict[datetime, List[Worker]]'\n      (note: a space is inserted after each coma for readability sake)\n    - a list of the fully-qualified types involved in the annotation: ['typing.Dict', 'datetime.datetime', 'typing.List', 'mymodule.Worker']\n    "
    str_2 = "\n    In the string representation of a compound type annotation, the elementary types can be prefixed by their packages or sub-packages.\n    Like in 'Dict[datetime.datetime,typing.List[Worker]]'. This function returns a tuple of 2 values:\n    - a string representation with shortened types for display purposes in the PlantUML documentation: 'Dict[datetime, List[Worker]]'\n      (note: a space is inserted after each coma for readability sake)\n    - a list of the fully-qualified types involved in the annotation: ['typing.Dict', 'datetime.datetime', 'typing.List', 'mymodule.Worker']\n    "
    iterable_0 = module_2.filter_domain_definitions(str_1, str_2)
    type_1 = module_4.UmlItem
    str_3 = "xL"
    module_5.inspect_class_type(type_1, str_3, none_type_0, none_type_0, type_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    type_0 = module_3.Enum
    str_0 = "H2bD"
    dict_0 = {}
    type_1 = module_6.UmlRelation
    var_0 = module_1.is_dataclass(type_1)
    var_1 = var_0.__eq__(type_0)
    var_2 = module_2.inspect_domain_definition(type_0, str_0, dict_0, var_1)
    str_1 = "\n    In the string representation of a compound type annotation, the elementary types can be prefixed by their packages or sub-packages.\n    Like in 'Dict[datetime.datetime,typing.List[Worker]]'. This function returns a tuple of 2 values:\n    - a string representation with shortened types for display purposes in the PlantUML documentation: 'Dict[datetime, List[Worker]]'\n      (note: a space is inserted after each coma for readability sake)\n    - a list of the fully-qualified types involved in the annotation: ['typing.Dict', 'datetime.datetime', 'typing.List', 'mymodule.Worker']\n    "
    str_2 = "\n    In the string representation of a compound type annotation, the elementary types can be prefixed by their packages or sub-packages.\n    Like in 'Dict[datetime.datetime,typing.List[Worker]]'. This function returns a tuple of 2 values:\n    - a string representation with shortened types for display purposes in the PlantUML documentation: 'Dict[datetime, List[Worker]]'\n      (note: a space is inserted after each coma for readability sake)\n    - a list of the fully-qualified types involved in the annotation: ['typing.Dict', 'datetime.datetime', 'typing.List', 'mymodule.Worker']\n    "
    iterable_0 = module_2.filter_domain_definitions(str_1, str_2)
    type_2 = module_4.UmlItem
    str_3 = "xL"
    module_5.inspect_class_type(type_2, str_3, none_type_0, none_type_0, type_2)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    type_0 = module_3.Enum
    str_0 = "H2bD"
    dict_0 = {}
    type_1 = module_6.UmlRelation
    var_0 = module_1.is_dataclass(type_1)
    var_1 = var_0.__eq__(type_0)
    var_2 = module_2.inspect_domain_definition(type_0, str_0, dict_0, var_1)
    str_1 = "\n    In the string representation of a compound type annotation, the elementary types can be prefixed by their packages or sub-packages.\n    Like in 'Dict[datetime.datetime,typing.List[Worker]]'. This function returns a tuple of 2 values:\n    - a string representation with shortened types for display purposes in the PlantUML documentation: 'Dict[datetime, List[Worker]]'\n      (note: a space is inserted after each coma for readability sake)\n    - a list of the fully-qualified types involved in the annotation: ['typing.Dict', 'datetime.datetime', 'typing.List', 'mymodule.Worker']\n    "
    var_3 = var_2.__eq__(str_0)
    str_2 = "\n    In the string representation of a compound type annotation, the elementary types can be prefixed by their packages or sub-packages.\n    Like in 'Dict[datetime.datetime,typing.List[Worker]]'. This function returns a tuple of 2 values:\n    - a string representation with shortened types for display purposes in the PlantUML documentation: 'Dict[datetime, List[Worker]]'\n      (note: a space is inserted after each coma for readability sake)\n    - a list of the fully-qualified types involved in the annotation: ['typing.Dict', 'datetime.datetime', 'typing.List', 'mymodule.Worker']\n    "
    iterable_0 = module_2.filter_domain_definitions(str_1, str_2)
    type_2 = module_4.UmlItem
    str_3 = "xL"
    module_5.inspect_class_type(type_2, str_3, none_type_0, none_type_0, type_2)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "jKJ5\tZwk("
    tuple_0 = (str_0,)
    none_type_0 = None
    module_5.inspect_class_type(tuple_0, tuple_0, none_type_0, none_type_0, none_type_0)


def test_case_5():
    bytes_0 = b"T6]\x89\xcf\xe8h"
    none_type_0 = None
    var_0 = module_2.inspect_module(bytes_0, bytes_0, none_type_0, bytes_0)
    float_0 = -2161.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    str_0 = "__code__"
    complex_0 = 2604.1 - 296.975875j
    uml_relation_0 = module_6.UmlRelation(str_0, str_0, complex_0)
    str_1 = "1wZK7yXV^0A\x0bSi1Mdqe"
    none_type_1 = None
    list_0 = [uml_relation_0, uml_relation_0]
    var_1 = module_2.inspect_module(uml_relation_0, str_1, none_type_1, list_0)
    var_2 = var_1.__eq__(dict_0)
    var_3 = module_2.inspect_module(var_2, dict_0, var_2, none_type_1)


def test_case_6():
    bytes_0 = b"T6]\x89\xcf\xe8h"
    none_type_0 = None
    var_0 = module_2.inspect_module(bytes_0, bytes_0, none_type_0, bytes_0)
    float_0 = -2161.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    str_0 = "__code__"
    complex_0 = 2604.1 - 296.975875j
    uml_relation_0 = module_6.UmlRelation(str_0, str_0, complex_0)
    str_1 = "1wZK7yXV^0A\x0bSi1Mdqe"
    none_type_1 = None
    list_0 = [uml_relation_0, uml_relation_0]
    var_1 = module_2.inspect_module(uml_relation_0, str_1, none_type_1, list_0)
    var_2 = var_1.__eq__(dict_0)
    set_0 = set()
    var_3 = module_2.inspect_module(var_2, dict_0, set_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "W\\\\yYy4zK\x0cH.%vu\nBx/{"
    iterable_0 = module_2.filter_domain_definitions(str_0, str_0)
    var_0 = iterable_0.__repr__()
    str_1 = 'h_(^"ofov(._v,T2a J'
    module_2.inspect_domain_definition(var_0, str_1, var_0, iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "benQA7qN"
    bool_0 = True
    str_1 = "Gi 1!;!8OHx??-=J.6#$"
    iterable_0 = module_2.filter_domain_definitions(bool_0, str_1)
    set_0 = set()
    iterable_1 = module_2.filter_domain_definitions(set_0, str_0)
    none_type_0 = None
    type_0 = module_0.int
    str_2 = "Variable"
    bool_1 = True
    dict_0 = {}
    var_0 = module_2.inspect_module(bool_1, none_type_0, dict_0, none_type_0)
    str_3 = "istitle"
    object_0 = module_0.object()
    dict_1 = {str_2: var_0, str_3: var_0}
    iterable_2 = module_2.filter_domain_definitions(var_0, none_type_0)
    var_1 = module_1.is_dataclass(bool_1)
    module_2.inspect_domain_definition(type_0, str_0, dict_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_2.inspect_domain_definition(dict_0, none_type_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '"]~+U24v'
    bool_0 = False
    uml_relation_0 = module_6.UmlRelation(str_0, str_0, bool_0)
    var_0 = uml_relation_0.__repr__()
    var_1 = uml_relation_0.__repr__()
    iterable_0 = module_2.filter_domain_definitions(str_0, var_0)
    var_2 = var_0.__eq__(var_0)
    str_1 = ""
    module_2.inspect_module(uml_relation_0, str_1, var_1, var_2)


@pytest.mark.xfail(strict=True)
def test_case_11():
    float_0 = -2895.906
    module_5.inspect_class_type(float_0, float_0, float_0, float_0, float_0)
