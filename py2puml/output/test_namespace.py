# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import py2puml.domain.package as module_0
import namespace as module_1
import py2puml.domain.umlitem as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "TS(&"
    package_0 = module_0.Package(str_0)
    none_type_0 = None
    complex_0 = -1086.244852 - 5820.5046j
    module_1.get_or_create_module_package(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    package_0 = module_0.Package(bool_0)
    package_1 = module_0.Package(package_0)
    var_0 = package_1.__repr__()
    package_2 = module_1.get_or_create_module_package(package_1, var_0)
    assert len(package_1.children) == 1
    assert (
        f"{type(package_2).__module__}.{type(package_2).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_2.name == ")"
    assert package_2.children == []
    assert package_2.items_number == 0
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    var_1 = package_0.__repr__()
    package_3 = module_1.get_or_create_module_package(package_1, var_1)
    assert package_3.name == ")"
    module_1.get_or_create_module_package(package_3, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    package_0 = module_0.Package(bool_0)
    package_1 = module_0.Package(package_0)
    var_0 = package_1.__repr__()
    package_2 = module_1.get_or_create_module_package(package_1, var_0)
    assert len(package_1.children) == 1
    assert (
        f"{type(package_2).__module__}.{type(package_2).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_2.name == ")"
    assert package_2.children == []
    assert package_2.items_number == 0
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    var_1 = package_0.__repr__()
    package_3 = module_1.get_or_create_module_package(package_1, var_1)
    assert package_3.name == ")"
    module_1.get_or_create_module_package(package_3, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    iterable_0 = module_1.visit_package(none_type_0, none_type_0, none_type_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    dict_0 = {}
    package_0 = module_1.build_packages_structure(dict_0)
    str_0 = "\\@8qBmIYmt2l_,N=4"
    tuple_0 = (str_0,)
    int_0 = -1287
    iterable_1 = module_1.visit_package(iterable_0, tuple_0, int_0)
    var_0 = package_0.__repr__()
    var_1 = var_0.__eq__(none_type_0)
    list_0 = [var_1, var_1]
    var_2 = package_0.__repr__()
    iterable_2 = module_1.puml_namespace_content(list_0)
    str_1 = ".__.biinit__"
    package_1 = module_0.Package(str_1, str_1)
    var_3 = var_1.__eq__(dict_0)
    var_4 = var_0.__eq__(iterable_2)
    var_5 = package_1.__repr__()
    var_6 = var_5.__repr__()
    iterable_3 = module_1.visit_package(var_6, var_5, var_6)
    list_1 = []
    var_7 = package_1.__repr__()
    iterable_4 = module_1.puml_namespace_content(none_type_0)
    iterable_5 = module_1.puml_namespace_content(list_1)
    iterable_6 = module_1.puml_namespace_content(iterable_5)
    package_2 = module_1.get_or_create_module_package(list_1, iterable_6)
    iterable_7 = module_1.visit_package(package_0, var_6, var_6)
    module_1.get_or_create_module_package(var_7, var_3)


def test_case_4():
    bool_0 = True
    iterable_0 = module_1.visit_package(bool_0, bool_0, bool_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"


def test_case_5():
    str_0 = "b>@(uIzl\rzOr;"
    package_0 = module_0.Package(str_0)
    iterable_0 = module_1.visit_package(package_0, package_0, str_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "F.b0Ich\rz9WD|has"
    uml_item_0 = module_2.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0, uml_item_0]
    iterable_0 = module_1.puml_namespace_content(list_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    package_0 = module_1.build_packages_structure(list_0)
    assert (
        f"{type(package_0).__module__}.{type(package_0).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_0.name is None
    assert (
        f"{type(package_0.children).__module__}.{type(package_0.children).__qualname__}"
        == "builtins.list"
    )
    assert len(package_0.children) == 1
    assert package_0.items_number == 0
    package_1 = module_1.get_or_create_module_package(package_0, iterable_0)
    assert len(package_0.children) == 2
    assert (
        f"{type(package_1).__module__}.{type(package_1).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_1.name == "namespace F {}\n"
    assert package_1.children == []
    assert package_1.items_number == 0
    package_2 = module_1.build_packages_structure(iterable_0)
    assert (
        f"{type(package_2).__module__}.{type(package_2).__qualname__}"
        == "py2puml.domain.package.Package"
    )
    assert package_2.name is None
    assert package_2.children == []
    assert package_2.items_number == 0
    str_1 = "H81\r6"
    module_1.build_packages_structure(str_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "F.b0Ich\rz9WD|has"
    uml_item_0 = module_2.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0, uml_item_0]
    iterable_0 = module_1.puml_namespace_content(list_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    module_1.build_packages_structure(iterable_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "B\x0b i-s"
    uml_item_0 = module_2.UmlItem(str_0, str_0)
    list_0 = [uml_item_0, uml_item_0, uml_item_0]
    iterable_0 = module_1.puml_namespace_content(list_0)
    assert module_1.INDENT == "  "
    assert (
        module_1.PUML_NAMESPACE_START_TPL
        == "{indentation}namespace {namespace_name} {{"
    )
    assert module_1.PUML_NAMESPACE_END_TPL == "{indentation}}}\n"
    module_1.build_packages_structure(iterable_0)
