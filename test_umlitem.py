# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import umlitem as module_0
import dataclasses as module_1


def test_case_0():
    str_0 = "S}+v2S&BX'6`5{3C7"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    var_0 = uml_item_0.__eq__(str_0)
    uml_item_1 = module_0.UmlItem(uml_item_0, uml_item_0)
    float_0 = -533.923569
    var_1 = uml_item_0.__eq__(var_0)
    float_1 = 1544.80711
    set_0 = {float_1}
    uml_item_2 = module_0.UmlItem(float_0, float_0)
    bool_0 = True
    var_2 = uml_item_0.__repr__()
    tuple_0 = (float_1, set_0, set_0, bool_0)
    none_type_0 = None
    var_3 = uml_item_1.__repr__()
    var_4 = module_1.dataclass(repr=tuple_0, eq=none_type_0, frozen=float_1)
    var_5 = var_4.__eq__(float_0)
    uml_item_3 = module_0.UmlItem(var_5, uml_item_1)
    var_6 = var_3.__repr__()
    int_0 = 2836
    var_7 = module_1.dataclass(kw_only=int_0)
    var_8 = var_7.__eq__(var_5)
    uml_item_4 = module_0.UmlItem(var_4, var_1)
    str_1 = "]"
    uml_item_5 = module_0.UmlItem(str_1, var_5)
    uml_item_6 = module_0.UmlItem(str_0, float_1)
    var_9 = var_8.__repr__()
    str_2 = "\n"
    uml_item_7 = module_0.UmlItem(uml_item_1, str_1)
    uml_item_8 = module_0.UmlItem(str_1, str_2)
    var_10 = uml_item_2.__repr__()

def test_case_1():
    str_0 = "TestString1"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_0

def test_case_2():
    str_0 = "AnotherTestString"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    assert uml_item_0.name != "NonEqualString"
    assert uml_item_0.fqn != "NonEqualString"

def test_case_3():
    str_0 = "TestString1"
    str_1 = "TestString2"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_4():
    str_0 = "IdenticalString"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    assert uml_item_0.name == uml_item_0.fqn

def test_case_5():
    str_0 = "TestName"
    str_1 = "TestFqn"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_6():
    str_0 = "TestName"
    str_1 = "TestFqn"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__repr__() == f"UmlItem(name='{str_0}', fqn='{str_1}')"

def test_case_7():
    str_0 = "TestName"
    str_1 = "TestFqn"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__eq__(module_0.UmlItem(str_0, str_1))

def test_case_8():
    str_0 = "TestName"
    str_1 = "TestFqn"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert not uml_item_0.__eq__(module_0.UmlItem(str_1, str_0))

def test_case_9():
    str_0 = "DifferentName"
    str_1 = "DifferentFqn"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_10():
    str_0 = "StringName"
    str_1 = "StringFqn"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != "NonMatchingName"
    assert uml_item_0.fqn != "NonMatchingFqn"

def test_case_11():
    str_0 = "AnotherName"
    str_1 = "AnotherFqn"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_12():
    str_0 = "EqualString"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    assert uml_item_0.name == uml_item_0.fqn

def test_case_13():
    str_0 = "TestName1"
    str_1 = "TestFqn1"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_14():
    str_0 = "TestName2"
    str_1 = "TestFqn2"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__repr__() == f"UmlItem(name='{str_0}', fqn='{str_1}')"

def test_case_15():
    str_0 = "TestName3"
    str_1 = "TestFqn3"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__eq__(module_0.UmlItem(str_0, str_1))

def test_case_16():
    str_0 = "TestName4"
    str_1 = "TestFqn4"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert not uml_item_0.__eq__(module_0.UmlItem(str_1, str_0))

def test_case_17():
    str_0 = "DifferentName17"
    str_1 = "DifferentFqn17"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_18():
    str_0 = "StringName18"
    str_1 = "StringFqn18"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != "NonMatchingName18"
    assert uml_item_0.fqn != "NonMatchingFqn18"

def test_case_19():
    str_0 = "AnotherName19"
    str_1 = "AnotherFqn19"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_20():
    str_0 = "EqualString20"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    assert uml_item_0.name == uml_item_0.fqn

def test_case_21():
    str_0 = "TestName21"
    str_1 = "TestFqn21"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_22():
    str_0 = "TestName22"
    str_1 = "TestFqn22"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__repr__() == f"UmlItem(name='{str_0}', fqn='{str_1}')"

def test_case_23():
    str_0 = "TestName23"
    str_1 = "TestFqn23"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__eq__(module_0.UmlItem(str_0, str_1))

def test_case_24():
    str_0 = "TestName24"
    str_1 = "TestFqn24"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert not uml_item_0.__eq__(module_0.UmlItem(str_1, str_0))

def test_case_25():
    str_0 = "Name25"
    str_1 = "Fqn25"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_26():
    str_0 = "Name26"
    str_1 = "Fqn26"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != "NonMatchingName26"
    assert uml_item_0.fqn != "NonMatchingFqn26"

def test_case_27():
    str_0 = "Name27"
    str_1 = "Fqn27"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_28():
    str_0 = "EqualString28"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    assert uml_item_0.name == uml_item_0.fqn

def test_case_29():
    str_0 = "Name29"
    str_1 = "Fqn29"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_30():
    str_0 = "Name30"
    str_1 = "Fqn30"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__repr__() == f"UmlItem(name='{str_0}', fqn='{str_1}')"

def test_case_31():
    str_0 = "Name31"
    str_1 = "Fqn31"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__eq__(module_0.UmlItem(str_0, str_1))

def test_case_32():
    str_0 = "Name32"
    str_1 = "Fqn32"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert not uml_item_0.__eq__(module_0.UmlItem(str_1, str_0))

def test_case_33():
    str_0 = "Name33"
    str_1 = "Fqn33"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_34():
    str_0 = "Name34"
    str_1 = "Fqn234"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_35():
    str_0 = "Name26123"
    str_1 = "Fqn26asd"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != "NonMatchingName26123"
    assert uml_item_0.fqn != "NonMatchingFqn26asd"

def test_case_36():
    str_0 = "Name27111111111"
    str_1 = "Fqn27111111111"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_37():
    str_0 = "EqualString28"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    assert uml_item_0.name == uml_item_0.fqn

def test_case_38():
    str_0 = "Name291"
    str_1 = "Fqn291"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_39():
    str_0 = "Name301"
    str_1 = "Fqn301"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__repr__() == f"UmlItem(name='{str_0}', fqn='{str_1}')"

def test_case_40():
    str_0 = "Name311"
    str_1 = "Fqn311"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__eq__(module_0.UmlItem(str_0, str_1))

def test_case_41():
    str_0 = "Name3222"
    str_1 = "Fqn3222"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert not uml_item_0.__eq__(module_0.UmlItem(str_1, str_0))

def test_case_42():
    str_0 = "Name3311"
    str_1 = "Fqn3311"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_43():
    str_0 = "Name215"
    str_1 = "Fqn215"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name == str_0
    assert uml_item_0.fqn == str_1

def test_case_44():
    str_0 = "Name126"
    str_1 = "Fqn126"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != "NonMatchingName126"
    assert uml_item_0.fqn != "NonMatchingFqn126"

def test_case_45():
    str_0 = "Name2117"
    str_1 = "Fqn2117"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_46():
    str_0 = "EqualString11128"
    uml_item_0 = module_0.UmlItem(str_0, str_0)
    assert uml_item_0.name == uml_item_0.fqn

def test_case_47():
    str_0 = "Name1129"
    str_1 = "Fqn1129"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.name != uml_item_0.fqn

def test_case_48():
    str_0 = "Name111130"
    str_1 = "Fqn111130"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__repr__() == f"UmlItem(name='{str_0}', fqn='{str_1}')"

def test_case_49():
    str_0 = "Nameaa31"
    str_1 = "Fqnaa31"
    uml_item_0 = module_0.UmlItem(str_0, str_1)
    assert uml_item_0.__eq__(module_0.UmlItem(str_0, str_1))

