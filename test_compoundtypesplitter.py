# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import compoundtypesplitter as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = True
    with pytest.raises(ValueError):
        module_0.CompoundTypeSplitter(none_type_0, bool_0)


def test_case_1():
    str_0 = "o*RZ#TL5N\x0b|0"
    str_1 = module_0.remove_forward_references(str_0, str_0)
    assert str_1 == "o*RZ#TL5N\x0b|0"
    assert module_0.SPLITTING_CHARACTERS == ("[", "]", ",")


def test_case_2():
    str_0 = "l)(T'\x0c=>h!\t:@,)"
    with pytest.raises(ValueError):
        module_0.CompoundTypeSplitter(str_0, str_0)


def test_case_3():
    str_0 = "(c:% ZqRpmkLY8dR#NT"
    str_1 = "__doc__"
    str_2 = "-F1k>MI8ko;4\x0c(0ixS\rA"
    compound_type_splitter_0 = module_0.CompoundTypeSplitter(str_1, str_2)
    assert (
        f"{type(compound_type_splitter_0).__module__}.{type(compound_type_splitter_0).__qualname__}"
        == "compoundtypesplitter.CompoundTypeSplitter"
    )
    assert compound_type_splitter_0.compound_type_annotation == "__doc__"
    assert module_0.SPLITTING_CHARACTERS == ("[", "]", ",")
    tuple_0 = compound_type_splitter_0.get_parts()
    tuple_1 = compound_type_splitter_0.get_parts()
    str_3 = module_0.remove_forward_references(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\n    Utilitary function which inspects the annotations of the given type\n    "
    str_1 = "R!+v"
    str_2 = "py2puml.domain"
    str_3 = "__doc__"
    str_4 = ""
    str_5 = module_0.remove_forward_references(str_3, str_4)
    assert str_5 == "__doc__"
    assert module_0.SPLITTING_CHARACTERS == ("[", "]", ",")
    compound_type_splitter_0 = module_0.CompoundTypeSplitter(str_2, str_0)
    assert (
        f"{type(compound_type_splitter_0).__module__}.{type(compound_type_splitter_0).__qualname__}"
        == "compoundtypesplitter.CompoundTypeSplitter"
    )
    assert compound_type_splitter_0.compound_type_annotation == "py2puml.domain"
    tuple_0 = compound_type_splitter_0.get_parts()
    compound_type_splitter_1 = module_0.CompoundTypeSplitter(str_0, str_1)
    str_6 = "Ez9G^4'Rs|\x0c_$c$a"
    str_7 = "]"
    compound_type_splitter_2 = module_0.CompoundTypeSplitter(str_7, str_7)
    tuple_1 = compound_type_splitter_2.get_parts()
    tuple_2 = (str_6,)
    module_0.CompoundTypeSplitter(tuple_2, tuple_2)


def test_case_5():
    str_0 = "GVg.Fyp,Iy|Mm"
    compound_type_splitter_0 = module_0.CompoundTypeSplitter(str_0, str_0)
    assert (
        f"{type(compound_type_splitter_0).__module__}.{type(compound_type_splitter_0).__qualname__}"
        == "compoundtypesplitter.CompoundTypeSplitter"
    )
    assert compound_type_splitter_0.compound_type_annotation == "GVg.Fyp,Iy|Mm"
    assert module_0.SPLITTING_CHARACTERS == ("[", "]", ",")
    tuple_0 = compound_type_splitter_0.get_parts()
    compound_type_splitter_1 = module_0.CompoundTypeSplitter(str_0, str_0)
    int_0 = -112
    tuple_1 = compound_type_splitter_1.get_parts()
    str_1 = "B"
    tuple_2 = (int_0, str_1)
    tuple_3 = compound_type_splitter_0.get_parts()
    tuple_4 = compound_type_splitter_0.get_parts()
    str_2 = "-v"
    dict_0 = {tuple_2: str_2, tuple_2: str_1, int_0: str_2}
    str_3 = "!LtP\rRD(~kyKjb_"
    with pytest.raises(ValueError):
        module_0.CompoundTypeSplitter(str_3, dict_0)

def test_case_6():
    str_0 = "List[str]"
    module_name = "module"
    res = module_0.remove_forward_references(str_0, module_name)
    assert res == "List[str]"


def test_case_7():
    str_0 = "Tuple[str, int]"
    module_name = "module"
    res = module_0.remove_forward_references(str_0, module_name)
    assert res == "Tuple[str, int]"


def test_case_8():
    str_0 = "ForwardRef('Person')"
    module_name = "module"
    res = module_0.remove_forward_references(str_0, module_name)
    assert res == "module.Person"


def test_case_9():
    str_0 = "List"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", )


def test_case_10():
    str_0 = "List[str]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "str", "]")


def test_case_11():
    str_0 = "Dict[str, int]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Dict", "[", "str", ",", "int", "]")


def test_case_12():
    str_0 = "ForwardRef('Person')"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("module.Person", )


def test_case_13():
    str_0 = "Tuple[ForwardRef('Person'), int]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "module.Person", ",", "int", "]")

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "Tuple"
    module_name = "module"
    with pytest.raises(ValueError):
        module_0.CompoundTypeSplitter(str_0, None)


def test_case_15():
    str_0 = "Tuple"
    module_name = "module"
    with pytest.raises(ValueError):
        module_0.CompoundTypeSplitter(None, module_name)

def test_case_16():
    str_0 = "Set[str]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Set", "[", "str", "]")


def test_case_17():
    str_0 = "Optional[str]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional", "[", "str", "]")


def test_case_18():
    str_0 = "Union[str, int]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Union", "[", "str", ",", "int", "]")


def test_case_19():
    str_0 = "Mapping[str, int]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Mapping", "[", "str", ",", "int", "]")


def test_case_20():
    str_0 = "List[Dict[str, int]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "Dict", "[", "str", ",", "int", "]", "]")


def test_case_21():
    str_0 = "Tuple[str, List[int]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "str", ",", "List", "[", "int", "]", "]")


def test_case_22():
    str_0 = "List[Optional[str]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "Optional", "[", "str", "]", "]")


def test_case_23():
    str_0 = "List[Union[str, int]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "Union", "[", "str", ",", "int", "]", "]")


def test_case_24():
    str_0 = "List[Mapping[str, int]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "Mapping", "[", "str", ",", "int", "]", "]")


def test_case_25():
    str_0 = "Tuple[Dict[str, int], List[str]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "Dict", "[", "str", ",", "int", "]", ",", "List", "[", "str", "]", "]")


def test_case_26():
    str_0 = "Optional[Union[str, int]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional", "[", "Union", "[", "str", ",", "int", "]", "]")

def test_case_27():
    str_0 = "ForwardRef('Person')"
    module_name = ""
    res = module_0.remove_forward_references(str_0, module_name)
    assert res == ".Person"

def test_case_28():
    str_0 = "Optional[ForwardRef('Person')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional", "[", "module.Person", "]")

def test_case_29():
    str_0 = "List[ForwardRef('Person')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "module.Person", "]")

def test_case_30():
    str_0 = "Tuple[ForwardRef('Person'), ForwardRef('Dog')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "module.Person", ",", "module.Dog", "]")

def test_case_31():
    str_0 = "List[str, int]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "str", ",", "int", "]")


def test_case_32():
    str_0 = "List[str, int, float]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "str", ",", "int", ",", "float", "]")


def test_case_33():
    str_0 = "List[str, List[int, float]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "str", ",", "List", "[", "int", ",", "float", "]", "]")


def test_case_34():
    str_0 = "List[Set[int, float]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "Set", "[", "int", ",", "float", "]", "]")


def test_case_35():
    str_0 = "ForwardRef('Person')"
    module_name = "module"
    res = module_0.remove_forward_references(str_0, module_name)
    assert res == "module.Person"


def test_case_36():
    str_0 = "List[ForwardRef('Person'), int]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "module.Person", ",", "int", "]")


def test_case_37():
    str_0 = "Optional[ForwardRef('Person')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional", "[", "module.Person", "]")


def test_case_38():
    str_0 = "List[ForwardRef('Person')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "module.Person", "]")


def test_case_39():
    str_0 = "Tuple[ForwardRef('Person'), ForwardRef('Dog')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "module.Person", ",", "module.Dog", "]")


def test_case_40():
    str_0 = "Dict[str, int]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts =splitter.get_parts()
    assert parts == ("Dict", "[", "str", ",", "int", "]")

def test_case_41():
    str_0 = "Dict[str, List[int]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Dict", "[", "str", ",", "List", "[", "int", "]", "]")

def test_case_42():
    str_0 = "Set[Union[int, str]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Set", "[", "Union", "[", "int", ",", "str", "]", "]")

def test_case_43():
    str_0 = "List[Union[int, str, List[float]]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "Union", "[", "int", ",", "str", ",", "List", "[", "float", "]", "]", "]")

def test_case_44():
    str_0 = "Dict[Union[int, str], List[Union[str, float]]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Dict", "[", "Union", "[", "int", ",", "str", "]", ",", "List", "[", "Union", "[", "str", ",", "float", "]", "]", "]")

def test_case_45():
    str_0 = "List"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List",)

def test_case_46():
    str_0 = "ForwardRef('Person')"
    module_name = "module"
    res = module_0.remove_forward_references(str_0, module_name)
    assert res == "module.Person"

def test_case_47():
    str_0 = "Optional[ForwardRef('Person')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional", "[", "module.Person", "]")

def test_case_48():
    str_0 = "List[ForwardRef('Person')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "module.Person", "]")

def test_case_49():
    str_0 = "Tuple[ForwardRef('Person'), ForwardRef('Dog')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "module.Person", ",", "module.Dog", "]")

def test_case_50():
    str_0 = "Tuple[int, str]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "int", ",", "str", "]")

def test_case_51():
    str_0 = "Dict[str, Union[int, float]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Dict", "[", "str", ",", "Union", "[", "int", ",", "float", "]", "]")

def test_case_52():
    str_0 = "Optional[str]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional", "[", "str", "]")

def test_case_53():
    str_0 = "Optional"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional",)

def test_case_54():
    str_0 = "Union[int, float, bool]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Union", "[", "int", ",", "float", ",", "bool", "]")

def test_case_55():
    str_0 = "List[Tuple[int, float]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "Tuple", "[", "int", ",", "float", "]", "]")

def test_case_56():
    str_0 = "Set[Union[int, str, float]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Set", "[", "Union", "[", "int", ",", "str", ",", "float", "]", "]")

def test_case_57():
    str_0 = "Tuple[ForwardRef('Cat'), ForwardRef('Dog')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "module.Cat", ",", "module.Dog", "]")

def test_case_58():
    str_0 = "List[ForwardRef('Cat')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "module.Cat", "]")

def test_case_59():
    str_0 = "Optional[ForwardRef('Cat')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional", "[", "module.Cat", "]")

def test_case_60():
    str_0 = "Type[str]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Type", "[", "str", "]")

def test_case_61():
    str_0 = "Callable[[int], str]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Callable", "[", "[", "int", "]", ",", "str", "]")

def test_case_62():
    str_0 = "Any"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Any",)

def test_case_63():
    str_0 = "List[Type[int]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("List", "[", "Type", "[", "int", "]", "]")

def test_case_64():
    str_0 = "Tuple[Type[str], Callable[[int], str]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Tuple", "[", "Type", "[", "str", "]", ",", "Callable", "[", "[", "int", "]", ",", "str", "]", "]")

def test_case_65():
    str_0 = "Set[Type[ForwardRef('Person')]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Set", "[", "Type", "[", "module.Person", "]", "]")

def test_case_66():
    str_0 = "Callable[[ForwardRef('Person')], ForwardRef('Dog')]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Callable", "[", "[", "module.Person", "]", ",", "module.Dog", "]")

def test_case_67():
    str_0 = "Any"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Any",)

def test_case_68():
    str_0 = "Dict[str, Callable[[int], str]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Dict", "[", "str", ",", "Callable", "[", "[", "int", "]", ",", "str", "]", "]")

def test_case_69():
    str_0 = "Optional[Callable[[int], str]]"
    module_name = "module"
    splitter = module_0.CompoundTypeSplitter(str_0, module_name)
    parts = splitter.get_parts()
    assert parts == ("Optional", "[", "Callable", "[", "[", "int", "]", ",", "str", "]", "]")
